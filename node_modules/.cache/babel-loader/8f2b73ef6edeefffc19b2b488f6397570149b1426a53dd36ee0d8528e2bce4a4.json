{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/outline.js\",\n  _s4 = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Editor from \"./editor\";\nimport \"./outline.css\";\nimport { useCollapse } from \"react-collapsed\";\nimport Xarrow from 'react-xarrows';\nimport { Box } from \"./box\";\nimport OpenAI from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Outline(props) {\n  _s4();\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n  const [isAIPopupOpen, setIsAIPopupOpen] = useState(false);\n  const [apiResponse, setApiResponse] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [projectIdea, setProjectIdea] = useState('');\n  const [editedIdea, setEditedIdea] = useState('');\n  const [files, setFiles] = useState([]);\n  const [currentFile, setCurrentFile] = useState(null);\n  const [outlineID, setOutlineID] = useState(\"\");\n  const [colorToUse, setColorToUse] = useState(\"\");\n  const [activeButton, setActiveButton] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n  const openai = new OpenAI({\n    apiKey: \"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\",\n    // Make sure to keep your API key secure\n    dangerouslyAllowBrowser: true\n  });\n  const handleSubmit = async (e, projectIdea) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      console.log(projectIdea);\n      const sysprompt = \"You are a helpful outline generator for coding projects. Given a project idea from the user, you should output the outline of the project in a TODO-list like format. Each item should FEWER THAN 6 words long. Output in JSON format like this: {0 : \\\"blah blah blah blah\\\", 1: \\\"blah blah blah blah blah blah\\\",...}. you should generate around 8 items in total.\";\n      const chatCompletion = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          \"role\": \"system\",\n          \"content\": sysprompt\n        }, {\n          \"role\": \"user\",\n          \"content\": projectIdea\n        }]\n      });\n      console.log(chatCompletion.choices[0].message.content);\n      setApiResponse(chatCompletion.choices[0].message.content);\n    } catch (e) {\n      console.error(e);\n      setApiResponse(\"Something is going wrong, Please try again.\");\n    }\n    setLoading(false);\n  };\n  const handleGenerateOutlineClick = () => {\n    setIsAIPopupOpen(true);\n  };\n  const handleClosePopup = () => {\n    setIsAIPopupOpen(false);\n  };\n  const handleInputChange = e => {\n    setProjectIdea(e.target.value);\n  };\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    handleSubmit(e, projectIdea);\n    handleClosePopup();\n  };\n  const AiPopup = ({\n    isOpen,\n    onClose,\n    onSubmit\n  }) => {\n    if (!isOpen) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"What project do you want to build?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmitForm,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: projectIdea,\n          onChange: handleInputChange,\n          placeholder: \"Enter your project idea\",\n          style: {\n            width: '95%',\n            padding: '10px',\n            marginBottom: '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"popup-button save\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"popup-button save\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  };\n  const [editedFolders, setEditedFolders] = useState([]);\n  // Define folder structure and toggle functionality\n  const [folders, setFolders] = useState([{\n    name: \"Home Page\",\n    children: [{\n      name: \"Parse info into files\"\n    }, {\n      name: \"Format and Display Pics\"\n    }],\n    isOpen: false\n  }, {\n    name: \"Order Online\",\n    children: [{\n      name: \"Connect Doordash API\"\n    }, {\n      name: \"Read Menu to JSON\"\n    }],\n    isOpen: false\n  }, {\n    name: \"Contact Us\",\n    children: [{\n      name: \"Format Footer\"\n    }],\n    isOpen: false\n  }]);\n  const extractChildrenNames = folders => {\n    return folders.flatMap(folder => folder.children.map(child => child.name));\n  };\n  const subfolderList = extractChildrenNames(folders);\n  const toggleFolder = folderName => {\n    setFolders(prevFolders => prevFolders.map(folder => folder.name === folderName ? {\n      ...folder,\n      isOpen: !folder.isOpen\n    } : folder));\n  };\n\n  // Fetch files when the component mounts\n  useEffect(() => {\n    async function fetchFiles() {\n      try {\n        const responses = await Promise.all([fetch('/example-code/apis.py'), fetch('/example-code/parse.py'), fetch('/example-code/format.py')]);\n        if (responses.every(response => response.ok)) {\n          const [apiText, parseText, setupText] = await Promise.all(responses.map(response => response.text()));\n          console.log(apiText);\n          const newFiles = [{\n            name: \"apis.py\",\n            content: apiText,\n            linesToColor: {\n              \"\": [],\n              \"Parse info into files\": [],\n              \"Format and Display Pics\": [],\n              \"Connect Doordash API\": [15, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114],\n              \"Read Menu to JSON\": [19, 20, 21, 22, 23, 17, 18],\n              \"Format Footer\": []\n            }\n          }, {\n            name: \"parse.py\",\n            content: parseText,\n            linesToColor: {\n              \"\": [],\n              \"Parse info into files\": [],\n              \"Format and Display Pics\": [],\n              \"Connect Doordash API\": [],\n              \"Read Menu to JSON\": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38],\n              \"Format Footer\": []\n            }\n          }, {\n            name: \"format.py\",\n            content: setupText,\n            linesToColor: {\n              \"\": [],\n              \"Parse info into files\": [],\n              \"Format and Display Pics\": [],\n              \"Connect Doordash API\": [],\n              \"Read Menu to JSON\": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n              \"Format Footer\": []\n            }\n          }];\n          setFiles(newFiles);\n          setCurrentFile(newFiles[0]);\n        } else {\n          throw new Error('Failed to fetch one or more files');\n        }\n      } catch (error) {\n        console.error(\"Error fetching files:\", error);\n      }\n    }\n    fetchFiles();\n  }, []);\n  const handleContentChange = useCallback(({\n    name,\n    content,\n    linesToColor\n  }) => {\n    if (currentFile) {\n      const updatedFiles = files.map(file => {\n        if (file.name === currentFile.name) {\n          console.log(\"Updating file:\", file.name);\n          return {\n            ...file,\n            content,\n            ...(linesToColor && {\n              linesToColor\n            })\n          };\n        }\n        return file;\n      });\n      setFiles(updatedFiles);\n      setCurrentFile(prev => ({\n        ...prev,\n        content,\n        ...(linesToColor && {\n          linesToColor\n        })\n      }));\n    }\n  }, [currentFile, files]);\n  const handleButtonClick = buttonName => {\n    setActiveButton(buttonName);\n  };\n  const handleEditOutlineClick = () => {\n    setShowPopup(true);\n    setEditedFolders([...folders]);\n  };\n  const handlePopupClose = () => {\n    setShowPopup(false);\n  };\n  if (!currentFile) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading files...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 28\n  }, this);\n\n  // Main App\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"vscode-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"vscode-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"editor\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-placeholder\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"editor-title\",\n            children: [\"Outline\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined help\",\n              children: \"help\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FolderStructure, {\n            folders: folders,\n            onToggleFolder: toggleFolder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"edit-outline-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"primary-button edit-outline\",\n            onClick: handleEditOutlineClick,\n            children: \"Edit Outline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"primary-button edit-outline\",\n            onClick: handleGenerateOutlineClick,\n            children: \"Generate New Outline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        className: \"terminal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-window\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-selector\",\n            children: files.map(file => {\n              const is_highlighted = file.linesToColor[outlineID].length !== 0;\n              const is_hidden = outlineID !== \"Read Menu to JSON\" && file.name === \"format.py\";\n              const buttonStyle = is_highlighted ? {\n                borderBottom: `8px solid ${colorToUse}`\n              } : {};\n              const buttonClass = is_hidden ? \"filename-button-hidden\" : \"filename-button\";\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                style: buttonStyle,\n                className: buttonClass,\n                onClick: () => setCurrentFile(file),\n                children: file.name\n              }, file.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Editor, {\n            linesToColor: currentFile.linesToColor[outlineID],\n            colorToUse: colorToUse,\n            currentFile: currentFile,\n            onContentChange: handleContentChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(Popup, {\n      onClose: handlePopupClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 21\n    }, this), isAIPopupOpen && /*#__PURE__*/_jsxDEV(AiPopup, {\n      isOpen: isAIPopupOpen,\n      onClose: handleClosePopup,\n      onSubmit: handleSubmitForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n  function FolderStructure({\n    folders,\n    onToggleFolder\n  }) {\n    _s();\n    const [totalHeight, setTotalHeight] = useState(0);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-structure\",\n      children: folders.map((folder, index) => /*#__PURE__*/_jsxDEV(FolderItem, {\n        folder: folder,\n        index: index,\n        totalHeight: totalHeight,\n        setTotalHeight: setTotalHeight,\n        onToggleFolder: onToggleFolder,\n        setOutlineID: setOutlineID // Pass setOutlineID as a prop\n        ,\n        setColorToUse: setColorToUse // Pass setColorToUse as a prop\n      }, folder.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this);\n  }\n  _s(FolderStructure, \"Tkjh7eE4zD5uly5eOXxLIFsQmhg=\");\n  function FolderItem({\n    folder,\n    index,\n    totalHeight,\n    setTotalHeight,\n    onToggleFolder,\n    setOutlineID,\n    setColorToUse\n  }) {\n    _s2();\n    const {\n      getCollapseProps,\n      getToggleProps,\n      isExpanded\n    } = useCollapse({\n      defaultExpanded: folder.isOpen\n    });\n    const folderHeight = isExpanded ? 30 + folder.children.length * 20 : 30;\n    const top = index === 0 ? 0 : totalHeight;\n    const handleSubfolderClick = (e, subfolderName) => {\n      e.preventDefault();\n      e.stopPropagation();\n      if (outlineID === subfolderName) {\n        setOutlineID(\"\");\n      } else {\n        setOutlineID(subfolderName);\n      }\n      console.log(subfolderName);\n      if (subfolderName === subfolderList[0]) {\n        setColorToUse(\"#32D4CC\");\n      } else if (subfolderName === subfolderList[1]) {\n        setColorToUse(\"#FFEA99\");\n      } else if (subfolderName === subfolderList[2]) {\n        setColorToUse(\"#7F83D3\");\n      } else if (subfolderName === subfolderList[3]) {\n        setColorToUse(\"#D47F9D\");\n      } else if (subfolderName === subfolderList[4]) {\n        setColorToUse(\"#7FADD3\");\n      } else {\n        setColorToUse(\"red\");\n      }\n    };\n    const [connections, setConnections] = useState([]);\n    const handleClosePopup = () => {\n      setShowPopup(false);\n    };\n    const [arrows, setArrows] = useState([]);\n    const addArrow = ({\n      start,\n      end\n    }) => {\n      setArrows([...arrows, {\n        start,\n        end\n      }]);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-item\",\n      style: {\n        top\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-toggle\",\n        onClick: () => onToggleFolder(folder.name)\n        // {...getToggleProps()}\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `material-symbols-outlined ${isExpanded ? \"folder-open\" : \"folder\"}`,\n          children: \"chevron_right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"folder-name\",\n          children: folder.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), folder.children && isExpanded && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"subfolders\",\n        ...getCollapseProps(),\n        children: folder.children.map(subfolder => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"subfolder-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"subfolder-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"subfolder-text\",\n              onClick: e => handleSubfolderClick(e, subfolder.name),\n              style: {\n                color: subfolder.name === outlineID ? colorToUse : 'white',\n                fontWeight: subfolder.name === outlineID ? \"bold\" : \"normal\"\n              },\n              children: subfolder.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              addArrow: addArrow,\n              handler: \"right\",\n              boxId: subfolder.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 15\n          }, this), arrows.map(ar => /*#__PURE__*/_jsxDEV(Xarrow, {\n            start: ar.start,\n            end: ar.end\n          }, ar.start + \"-.\" + ar.end, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 15\n          }, this))]\n        }, subfolder.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this), connections.map((conn, idx) => /*#__PURE__*/_jsxDEV(Xarrow, {\n        start: conn.start,\n        end: conn.end,\n        startAnchor: \"auto\",\n        endAnchor: \"auto\",\n        color: \"magenta\"\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this);\n  }\n  _s2(FolderItem, \"H/5Huuikr7cY/PdSroGrwK13k0Q=\", false, function () {\n    return [useCollapse];\n  });\n  function Popup({\n    onClose\n  }) {\n    _s3();\n    const [editedFolders, setEditedFolders] = useState([...folders]);\n    const handleFolderNameChange = (e, folderIndex) => {\n      const newFolders = editedFolders.map((folder, index) => {\n        if (index === folderIndex) {\n          return {\n            ...folder,\n            name: e.target.value\n          };\n        }\n        return folder;\n      });\n      setEditedFolders(newFolders);\n    };\n    const handleSubfolderNameChange = (e, folderIndex, subfolderIndex) => {\n      const newFolders = editedFolders.map((folder, index) => {\n        if (index === folderIndex) {\n          const newChildren = folder.children.map((subfolder, subIndex) => {\n            if (subIndex === subfolderIndex) {\n              return {\n                ...subfolder,\n                name: e.target.value\n              };\n            }\n            return subfolder;\n          });\n          return {\n            ...folder,\n            children: newChildren\n          };\n        }\n        return folder;\n      });\n      setEditedFolders(newFolders);\n    };\n    const renderFolder = (folder, folderIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-folder\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: folder.name,\n        onChange: e => handleFolderNameChange(e, folderIndex)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this), folder.children && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"popup-subfolders\",\n        children: folder.children.map((subfolder, subfolderIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"popup-subfolder\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: subfolder.name,\n            onChange: e => handleSubfolderNameChange(e, folderIndex, subfolderIndex)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 17\n          }, this)\n        }, subfolderIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 11\n      }, this)]\n    }, folderIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"popup-title\",\n          children: \"Bakery Website\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"popup-close\",\n          onClick: onClose,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-content\",\n        children: editedFolders.map((folder, folderIndex) => renderFolder(folder, folderIndex))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"popup-button cancel\",\n          onClick: onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"popup-button save\",\n          onClick: () => {\n            onClose();\n            setFolders(editedFolders);\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }, this);\n  }\n  _s3(Popup, \"U1twg9nE1lscc98VMEIHDZ55xxM=\");\n}\n_s4(Outline, \"xoSj1SjMzhIGVXlDM/8//WHn/ZQ=\");\n_c = Outline;\nvar _c;\n$RefreshReg$(_c, \"Outline\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Editor","useCollapse","Xarrow","Box","OpenAI","jsxDEV","_jsxDEV","Outline","props","_s4","_s","$RefreshSig$","_s2","_s3","isAIPopupOpen","setIsAIPopupOpen","apiResponse","setApiResponse","loading","setLoading","projectIdea","setProjectIdea","editedIdea","setEditedIdea","files","setFiles","currentFile","setCurrentFile","outlineID","setOutlineID","colorToUse","setColorToUse","activeButton","setActiveButton","showPopup","setShowPopup","openai","apiKey","dangerouslyAllowBrowser","handleSubmit","e","preventDefault","console","log","sysprompt","chatCompletion","chat","completions","create","model","messages","choices","message","content","error","handleGenerateOutlineClick","handleClosePopup","handleInputChange","target","value","handleSubmitForm","AiPopup","isOpen","onClose","onSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","style","width","padding","marginBottom","onClick","editedFolders","setEditedFolders","folders","setFolders","name","extractChildrenNames","flatMap","folder","map","child","subfolderList","toggleFolder","folderName","prevFolders","fetchFiles","responses","Promise","all","fetch","every","response","ok","apiText","parseText","setupText","text","newFiles","linesToColor","Error","handleContentChange","updatedFiles","file","prev","handleButtonClick","buttonName","handleEditOutlineClick","handlePopupClose","FolderStructure","onToggleFolder","is_highlighted","length","is_hidden","buttonStyle","borderBottom","buttonClass","onContentChange","Popup","totalHeight","setTotalHeight","index","FolderItem","getCollapseProps","getToggleProps","isExpanded","defaultExpanded","folderHeight","top","handleSubfolderClick","subfolderName","stopPropagation","connections","setConnections","arrows","setArrows","addArrow","start","end","subfolder","class","color","fontWeight","handler","boxId","ar","conn","idx","startAnchor","endAnchor","handleFolderNameChange","folderIndex","newFolders","handleSubfolderNameChange","subfolderIndex","newChildren","subIndex","renderFolder","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/outline.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Editor from \"./editor\";\nimport \"./outline.css\";\nimport { useCollapse } from \"react-collapsed\";\nimport Xarrow from 'react-xarrows';\nimport { Box } from \"./box\";\nimport OpenAI from 'openai';\n\n\nexport function Outline(props) {\n\n  const [isAIPopupOpen, setIsAIPopupOpen] = useState(false);\n  const [apiResponse, setApiResponse] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [projectIdea, setProjectIdea] = useState('');\n  const [editedIdea, setEditedIdea] = useState('');\n\n  const [files, setFiles] = useState([]);\n  const [currentFile, setCurrentFile] = useState(null);\n  const [outlineID, setOutlineID] = useState(\"\");\n  const [colorToUse, setColorToUse] = useState(\"\");\n  const [activeButton, setActiveButton] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n\n  const openai = new OpenAI({\n    apiKey: \"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\", // Make sure to keep your API key secure\n    dangerouslyAllowBrowser: true\n  });\n\n  const handleSubmit = async (e, projectIdea) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      console.log(projectIdea);\n      const sysprompt = \"You are a helpful outline generator for coding projects. Given a project idea from the user, you should output the outline of the project in a TODO-list like format. Each item should FEWER THAN 6 words long. Output in JSON format like this: {0 : \\\"blah blah blah blah\\\", 1: \\\"blah blah blah blah blah blah\\\",...}. you should generate around 8 items in total.\";\n      const chatCompletion = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          {\"role\": \"system\", \"content\": sysprompt},\n          {\"role\": \"user\", \"content\": projectIdea}\n        ],\n      });\n      console.log(chatCompletion.choices[0].message.content);\n      setApiResponse(chatCompletion.choices[0].message.content);\n    } catch (e) {\n      console.error(e);\n      setApiResponse(\"Something is going wrong, Please try again.\");\n    }\n    setLoading(false);\n  };\n\n  const handleGenerateOutlineClick = () => {\n    setIsAIPopupOpen(true);\n  };\n\n  const handleClosePopup = () => {\n    setIsAIPopupOpen(false);\n  };\n\n  const handleInputChange = (e) => {\n    setProjectIdea(e.target.value);\n  };\n\n  const handleSubmitForm = (e) => {\n    e.preventDefault();\n    handleSubmit(e, projectIdea);\n    handleClosePopup();\n  };\n\n  const AiPopup = ({ isOpen, onClose, onSubmit }) => {\n\n    if (!isOpen) return null;\n  \n    return (\n      <div className=\"popup\" >\n        <h2>What project do you want to build?</h2>\n        <form onSubmit={handleSubmitForm}>\n          <input\n            type=\"text\"\n            value={projectIdea}\n            onChange={handleInputChange}\n            placeholder=\"Enter your project idea\"\n            style={{ width: '95%', padding: '10px', marginBottom: '10px' }}\n          />\n          <button className=\"popup-button save\" type=\"submit\" >\n            Submit\n          </button>\n          <button onClick={onClose} className=\"popup-button save\" >Close</button>\n        </form>\n      </div>\n    );\n  };\n\n  const [editedFolders, setEditedFolders] = useState([]);\n  // Define folder structure and toggle functionality\n  const [folders, setFolders] = useState([\n    {\n      name: \"Home Page\",\n      children: [\n        { name: \"Parse info into files\" },\n        { name: \"Format and Display Pics\" },\n      ],\n      isOpen: false,\n    },\n    {\n      name: \"Order Online\",\n      children: [\n        { name: \"Connect Doordash API\" },\n        { name: \"Read Menu to JSON\" },\n      ],\n      isOpen: false,\n    },\n    {\n      name: \"Contact Us\",\n      children: [\n        { name: \"Format Footer\" }\n      ],\n      isOpen: false,\n    },\n  ]);\n\n  const extractChildrenNames = (folders) => {\n    return folders.flatMap(folder => folder.children.map(child => child.name));\n  };\n\n  const subfolderList = extractChildrenNames(folders);\n\n  const toggleFolder = (folderName) => {\n    setFolders(prevFolders =>\n      prevFolders.map(folder =>\n        folder.name === folderName ? { ...folder, isOpen: !folder.isOpen } : folder\n      )\n    );\n  };\n\n  // Fetch files when the component mounts\n  useEffect(() => {\n    async function fetchFiles() {\n      try {\n        const responses = await Promise.all([\n          fetch('/example-code/apis.py'),\n          fetch('/example-code/parse.py'),\n          fetch('/example-code/format.py')\n        ]);\n        if (responses.every(response => response.ok)) {\n          const [apiText, parseText, setupText] = await Promise.all(responses.map(response => response.text()));\n          console.log(apiText);\n          const newFiles = [\n            {\n              name: \"apis.py\",\n              content: apiText,\n              linesToColor: {\n                \"\": [],\n                \"Parse info into files\": [],\n                \"Format and Display Pics\": [],\n                \"Connect Doordash API\": [15, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114],\n                \"Read Menu to JSON\": [19, 20, 21, 22, 23, 17, 18],\n                \"Format Footer\": []\n              },\n            },\n            {\n              name: \"parse.py\",\n              content: parseText,\n              linesToColor: { \"\": [],\n                \"Parse info into files\": [],\n                \"Format and Display Pics\": [],\n                \"Connect Doordash API\": [],\n                \"Read Menu to JSON\": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38],\n                \"Format Footer\": []\n              },\n            },\n            {\n              name: \"format.py\",\n              content: setupText,\n              linesToColor: { \"\": [],\n                \"Parse info into files\": [],\n                \"Format and Display Pics\": [],\n                \"Connect Doordash API\": [],\n                \"Read Menu to JSON\": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n                \"Format Footer\": []\n              },\n            }\n          ];\n          setFiles(newFiles);\n          setCurrentFile(newFiles[0]);\n        } else {\n          throw new Error('Failed to fetch one or more files');\n        }\n      } catch (error) {\n        console.error(\"Error fetching files:\", error);\n      }\n    }\n    fetchFiles();\n  }, []);\n\n  const handleContentChange = useCallback(\n    ({ name, content, linesToColor }) => {\n      if (currentFile) {\n        const updatedFiles = files.map(file => {\n          if (file.name === currentFile.name) {\n            console.log(\"Updating file:\", file.name);\n            return { ...file, content, ...(linesToColor && { linesToColor }) };\n          }\n          return file;\n        });\n        setFiles(updatedFiles);\n        setCurrentFile(prev => ({\n          ...prev,\n          content,\n          ...(linesToColor && { linesToColor })\n        }));\n      }\n    },\n    [currentFile, files]\n  );\n  \n  const handleButtonClick = (buttonName) => {\n    setActiveButton(buttonName);\n  };\n\n  const handleEditOutlineClick = () => {\n    setShowPopup(true);\n    setEditedFolders([...folders]);\n  };\n\n  const handlePopupClose = () => {\n    setShowPopup(false);\n  };\n\n  if (!currentFile) return <div>Loading files...</div>; \n\n  // Main App\n  return (\n    <div className=\"vscode-app\">\n      <main className=\"vscode-main\">\n        <section className=\"editor\">\n          <div className=\"editor-placeholder\">\n            <h1 className=\"editor-title\">\n              Outline\n              <span className=\"material-symbols-outlined help\">help</span>\n            </h1>\n            <FolderStructure\n                folders={folders}\n                onToggleFolder={toggleFolder}\n            />\n          </div>\n            {/* Folder structure component */}\n          <div className=\"edit-outline-container\">\n            {/* Popup Code */}\n            <button\n              className=\"primary-button edit-outline\"\n              onClick={handleEditOutlineClick}\n            >\n              Edit Outline\n            </button>\n              {/* New Generate New Outline Button */}\n          <button\n            className=\"primary-button edit-outline\"\n            onClick={handleGenerateOutlineClick}\n          >\n            Generate New Outline\n          </button>\n          </div>\n        </section>\n\n        <aside className=\"terminal\">\n          <div className=\"editor-window\">\n            <div className=\"file-selector\">\n              {files.map((file) => {\n                const is_highlighted =\n                  file.linesToColor[outlineID].length !== 0;\n                const is_hidden = outlineID !== \"Read Menu to JSON\" && file.name === \"format.py\";\n                const buttonStyle = is_highlighted\n                  ? { borderBottom: `8px solid ${colorToUse}` }\n                  : {};\n                const buttonClass = is_hidden\n                  ? \"filename-button-hidden\"\n                  : \"filename-button\";\n\n                return (\n                  <button\n                    style={buttonStyle}\n                    className={buttonClass}\n                    key={file.name}\n                    onClick={() => setCurrentFile(file)}\n                  >\n                    {file.name}\n                  </button>\n                );\n              })}\n            </div>\n            <Editor\n              linesToColor={currentFile.linesToColor[outlineID]}\n              colorToUse={colorToUse}\n              currentFile={currentFile}\n              onContentChange={handleContentChange}\n            />\n          </div>\n        </aside>\n      </main>\n      {showPopup && <Popup onClose={handlePopupClose} />}\n      {isAIPopupOpen && <AiPopup isOpen={isAIPopupOpen} onClose={handleClosePopup} onSubmit={handleSubmitForm} />}\n    </div>\n  );\n\n  function FolderStructure({ folders, onToggleFolder }) {\n    const [totalHeight, setTotalHeight] = useState(0);\n\n    return (\n      <div className=\"folder-structure\">\n        {folders.map((folder, index) => (\n          <FolderItem\n            key={folder.name}\n            folder={folder}\n            index={index}\n            totalHeight={totalHeight}\n            setTotalHeight={setTotalHeight}\n            onToggleFolder={onToggleFolder}\n            setOutlineID={setOutlineID} // Pass setOutlineID as a prop\n            setColorToUse={setColorToUse} // Pass setColorToUse as a prop\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function FolderItem({\n    folder,\n    index,\n    totalHeight,\n    setTotalHeight,\n    onToggleFolder,\n    setOutlineID,\n    setColorToUse,\n  }) {\n    const { getCollapseProps, getToggleProps, isExpanded } = useCollapse({\n      defaultExpanded: folder.isOpen,\n    });\n\n    const folderHeight = isExpanded ? 30 + folder.children.length * 20 : 30;\n    const top = index === 0 ? 0 : totalHeight;\n\n    const handleSubfolderClick = (e, subfolderName) => {\n      e.preventDefault();\n      e.stopPropagation();\n      if (outlineID === subfolderName) {\n        setOutlineID(\"\");\n      } else {\n        setOutlineID(subfolderName)\n      }\n      console.log(subfolderName);\n      if (subfolderName === subfolderList[0]) {\n        setColorToUse(\"#32D4CC\");\n      } else if (subfolderName === subfolderList[1]) {\n        setColorToUse(\"#FFEA99\");\n      } else if (subfolderName === subfolderList[2]) {\n        setColorToUse(\"#7F83D3\");\n      } else if (subfolderName === subfolderList[3]) {\n        setColorToUse(\"#D47F9D\");\n      } else if (subfolderName === subfolderList[4]) {\n        setColorToUse(\"#7FADD3\");\n      } else {\n        setColorToUse(\"red\");\n      }\n    };\n\n    const [connections, setConnections] = useState([]);\n\n    const handleClosePopup = () => {\n      setShowPopup(false);\n    };\n    const [arrows, setArrows] = useState([]);\n    const addArrow = ({ start, end }) => {\n      setArrows([...arrows, { start, end }]);\n    };\n\n    return (\n      <div className=\"folder-item\" style={{ top }}>\n        <div\n          className=\"folder-toggle\"\n          onClick={() => onToggleFolder(folder.name)}\n          // {...getToggleProps()}\n        >\n          <span\n            className={`material-symbols-outlined ${\n              isExpanded ? \"folder-open\" : \"folder\"\n            }`}\n          >\n            chevron_right\n          </span>\n          <span className=\"folder-name\">{folder.name}</span>\n        </div>\n        {folder.children && isExpanded && (\n          <ul className=\"subfolders\" {...getCollapseProps()}>\n            {folder.children.map((subfolder) => (\n              <li key={subfolder.name} className=\"subfolder-item\">\n              <div class=\"subfolder-box\">\n              <div class=\"subfolder-text\" \n              onClick={(e) => handleSubfolderClick(e, subfolder.name)}\n              style={{\n                color: subfolder.name === outlineID ? colorToUse : 'white',\n                fontWeight: subfolder.name === outlineID ? \"bold\" : \"normal\"\n              }}>\n                {subfolder.name}\n              </div>\n              <Box\n                addArrow={addArrow}\n                handler=\"right\"\n                boxId={subfolder.name}\n              />\n              </div>\n              {arrows.map(ar => (\n              <Xarrow\n                start={ar.start}\n                end={ar.end}\n                key={ar.start + \"-.\" + ar.end}\n              />\n              ))}\n              </li>\n            ))}\n          </ul>\n        )}\n        {connections.map((conn, idx) => (\n          <Xarrow\n            key={idx}\n            start={conn.start}\n            end={conn.end}\n            startAnchor=\"auto\"\n            endAnchor=\"auto\"\n            color=\"magenta\"\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function Popup({ onClose }) {\n    const [editedFolders, setEditedFolders] = useState([...folders]);\n\n    const handleFolderNameChange = (e, folderIndex) => {\n      const newFolders = editedFolders.map((folder, index) => {\n        if (index === folderIndex) {\n          return { ...folder, name: e.target.value };\n        }\n        return folder;\n      });\n      setEditedFolders(newFolders);\n    };\n  \n    const handleSubfolderNameChange = (e, folderIndex, subfolderIndex) => {\n      const newFolders = editedFolders.map((folder, index) => {\n        if (index === folderIndex) {\n          const newChildren = folder.children.map((subfolder, subIndex) => {\n            if (subIndex === subfolderIndex) {\n              return { ...subfolder, name: e.target.value };\n            }\n            return subfolder;\n          });\n          return { ...folder, children: newChildren };\n        }\n        return folder;\n      });\n      setEditedFolders(newFolders);\n    };\n\n    const renderFolder = (folder, folderIndex) => (\n      <div key={folderIndex} className=\"popup-folder\">\n        <input\n          type=\"text\"\n          value={folder.name}\n          onChange={(e) => handleFolderNameChange(e, folderIndex)}\n        />\n        {folder.children && (\n          <ul className=\"popup-subfolders\">\n            {folder.children.map((subfolder, subfolderIndex) => (\n              <li key={subfolderIndex} className=\"popup-subfolder\">\n                <input\n                  type=\"text\"\n                  value={subfolder.name}\n                  onChange={(e) => handleSubfolderNameChange(e, folderIndex, subfolderIndex)}\n                />\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    );\n\n    return (\n      <div className=\"popup\">\n        <div className=\"popup-header\">\n          <h2 className=\"popup-title\">Bakery Website</h2>\n          <button className=\"popup-close\" onClick={onClose}>\n            &times;\n          </button>\n        </div>\n        <div className=\"popup-content\">\n          {editedFolders.map((folder, folderIndex) => renderFolder(folder, folderIndex))}\n        </div>\n        <div className=\"popup-footer\">\n          <button className=\"popup-button cancel\" onClick={onClose}>Cancel</button>\n          <button className=\"popup-button save\" onClick={() => { onClose(); setFolders(editedFolders); }}>Save</button>\n        </div>\n      </div>\n    );\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}