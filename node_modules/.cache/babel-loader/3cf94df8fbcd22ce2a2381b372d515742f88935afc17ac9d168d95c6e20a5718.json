{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker } from '@codemirror/view';\n// import { basicSetup } from '@codemirror/basic-setup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RedGutterMarker extends GutterMarker {\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.color = 'red';\n    marker.textContent = '●'; // Or any marker symbol you prefer\n    return marker;\n  }\n}\n// Editor component\nconst EditorComponent = ({\n  redLines\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  useEffect(() => {\n    if (!editorRef.current) return;\n\n    // Initialize editor state with custom gutter\n    const startState = EditorState.create({\n      doc: '// Your code here\\n',\n      extensions: [\n      // basicSetup,\n      gutter({\n        class: 'custom-gutter',\n        lineMarker: (view, line) => {\n          // Check if the current line number should have a red marker\n          if (redLines.includes(line.number)) {\n            return new RedGutterMarker();\n          }\n          return null; // Default markers or no marker\n        }\n      })]\n    });\n\n    // Create a new EditorView\n    const view = new EditorView({\n      state: startState,\n      parent: editorRef.current\n    });\n\n    // Cleanup function to destroy the editor view when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [redLines]); // Dependency array to re-initialize the editor if redLines change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n_s(EditorComponent, \"FXGU5sRik9TpAO5B+Yli91RwFDk=\");\n_c = EditorComponent;\nexport default EditorComponent;\n\n// import React, { useEffect, useRef } from 'react';\n// import { EditorState } from '@codemirror/state';\n// import { EditorView, lineNumbers } from '@codemirror/view';\n// import { javascript } from '@codemirror/lang-javascript';\n\n// const Editor = ({ value, onChange }) => {\n//   const editorParentRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!editorParentRef.current) return;\n\n//     // Line numbers styling extension\n//     const customLineNumberStyle = EditorView.baseTheme({\n//       '.cm-lineNumbers .cm-gutterElement': {\n//         color: '#f00', // Example color: red\n//         fontFamily: 'Monaco, monospace',\n//         fontSize: '0.85em',\n//       }\n//     });\n\n//     const startState = EditorState.create({\n//       doc: value,\n//       extensions: [lineNumbers(), customLineNumberStyle, javascript()],\n//     });\n\n//     const view = new EditorView({\n//       state: startState,\n//       parent: editorParentRef.current,\n//     });\n\n//     // Cleanup to avoid memory leaks\n//     return () => {\n//       view.destroy();\n//     };\n//   }, [value, onChange]);\n\n//   return <div ref={editorParentRef} style={{ border: '1px solid #ddd', height: '400px' }} />;\n// };\n\n// export default Editor;\nvar _c;\n$RefreshReg$(_c, \"EditorComponent\");","map":{"version":3,"names":["React","useEffect","useRef","EditorState","EditorView","gutter","GutterMarker","jsxDEV","_jsxDEV","RedGutterMarker","toDOM","marker","document","createElement","style","color","textContent","EditorComponent","redLines","_s","editorRef","current","startState","create","doc","extensions","class","lineMarker","view","line","includes","number","state","parent","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker } from '@codemirror/view';\n// import { basicSetup } from '@codemirror/basic-setup';\n\nclass RedGutterMarker extends GutterMarker {\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.color = 'red';\n    marker.textContent = '●'; // Or any marker symbol you prefer\n    return marker;\n  }\n}\n// Editor component\nconst EditorComponent = ({ redLines }) => {\n  const editorRef = useRef(null);\n\n  useEffect(() => {\n    if (!editorRef.current) return;\n\n    // Initialize editor state with custom gutter\n    const startState = EditorState.create({\n      doc: '// Your code here\\n',\n      extensions: [\n        // basicSetup,\n        gutter({\n          class: 'custom-gutter',\n          lineMarker: (view, line) => {\n            // Check if the current line number should have a red marker\n            if (redLines.includes(line.number)) {\n              return new RedGutterMarker();\n            }\n            return null; // Default markers or no marker\n          },\n        }),\n      ],\n    });\n\n    // Create a new EditorView\n    const view = new EditorView({\n      state: startState,\n      parent: editorRef.current,\n    });\n\n    // Cleanup function to destroy the editor view when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [redLines]); // Dependency array to re-initialize the editor if redLines change\n\n  return <div ref={editorRef} />;\n};\n\nexport default EditorComponent;\n\n\n// import React, { useEffect, useRef } from 'react';\n// import { EditorState } from '@codemirror/state';\n// import { EditorView, lineNumbers } from '@codemirror/view';\n// import { javascript } from '@codemirror/lang-javascript';\n\n// const Editor = ({ value, onChange }) => {\n//   const editorParentRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!editorParentRef.current) return;\n\n//     // Line numbers styling extension\n//     const customLineNumberStyle = EditorView.baseTheme({\n//       '.cm-lineNumbers .cm-gutterElement': {\n//         color: '#f00', // Example color: red\n//         fontFamily: 'Monaco, monospace',\n//         fontSize: '0.85em',\n//       }\n//     });\n\n//     const startState = EditorState.create({\n//       doc: value,\n//       extensions: [lineNumbers(), customLineNumberStyle, javascript()],\n//     });\n\n//     const view = new EditorView({\n//       state: startState,\n//       parent: editorParentRef.current,\n//     });\n\n//     // Cleanup to avoid memory leaks\n//     return () => {\n//       view.destroy();\n//     };\n//   }, [value, onChange]);\n\n//   return <div ref={editorParentRef} style={{ border: '1px solid #ddd', height: '400px' }} />;\n// };\n\n// export default Editor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,UAAU,EAAEC,MAAM,EAAEC,YAAY,QAAQ,kBAAkB;AACnE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,eAAe,SAASH,YAAY,CAAC;EACzCI,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC5CF,MAAM,CAACG,KAAK,CAACC,KAAK,GAAG,KAAK;IAC1BJ,MAAM,CAACK,WAAW,GAAG,GAAG,CAAC,CAAC;IAC1B,OAAOL,MAAM;EACf;AACF;AACA;AACA,MAAMM,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAMC,SAAS,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACmB,SAAS,CAACC,OAAO,EAAE;;IAExB;IACA,MAAMC,UAAU,GAAGnB,WAAW,CAACoB,MAAM,CAAC;MACpCC,GAAG,EAAE,qBAAqB;MAC1BC,UAAU,EAAE;MACV;MACApB,MAAM,CAAC;QACLqB,KAAK,EAAE,eAAe;QACtBC,UAAU,EAAEA,CAACC,IAAI,EAAEC,IAAI,KAAK;UAC1B;UACA,IAAIX,QAAQ,CAACY,QAAQ,CAACD,IAAI,CAACE,MAAM,CAAC,EAAE;YAClC,OAAO,IAAItB,eAAe,CAAC,CAAC;UAC9B;UACA,OAAO,IAAI,CAAC,CAAC;QACf;MACF,CAAC,CAAC;IAEN,CAAC,CAAC;;IAEF;IACA,MAAMmB,IAAI,GAAG,IAAIxB,UAAU,CAAC;MAC1B4B,KAAK,EAAEV,UAAU;MACjBW,MAAM,EAAEb,SAAS,CAACC;IACpB,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXO,IAAI,CAACM,OAAO,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBAAOV,OAAA;IAAK2B,GAAG,EAAEf;EAAU;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChC,CAAC;AAACpB,EAAA,CArCIF,eAAe;AAAAuB,EAAA,GAAfvB,eAAe;AAuCrB,eAAeA,eAAe;;AAG9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}