{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/outline.js\",\n  _s4 = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Editor from \"./editor\";\nimport \"./outline.css\";\nimport { useCollapse } from \"react-collapsed\";\nimport Xarrow from 'react-xarrows';\nimport { Box } from \"./box\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Outline(props) {\n  _s4();\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n  const {\n    Configuration,\n    OpenAIApi\n  } = require(\"openai\");\n  const [files, setFiles] = useState([]);\n  const [currentFile, setCurrentFile] = useState(null);\n  const [outlineID, setOutlineID] = useState(\"\");\n  const [colorToUse, setColorToUse] = useState(\"\");\n  const [activeButton, setActiveButton] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n  const [editedFolders, setEditedFolders] = useState([]);\n  // Define folder structure and toggle functionality\n  const [folders, setFolders] = useState([{\n    name: \"Home Page\",\n    children: [{\n      name: \"Parse info into files\"\n    }, {\n      name: \"Format and Display Pics\"\n    }],\n    isOpen: false\n  }, {\n    name: \"Order Online\",\n    children: [{\n      name: \"Connect Doordash API\"\n    }, {\n      name: \"Read Menu to JSON\"\n    }],\n    isOpen: false\n  }, {\n    name: \"Contact Us\",\n    children: [{\n      name: \"Format Footer\"\n    }],\n    isOpen: false\n  }]);\n  const extractChildrenNames = folders => {\n    return folders.flatMap(folder => folder.children.map(child => child.name));\n  };\n  const subfolderList = extractChildrenNames(folders);\n  const toggleFolder = folderName => {\n    setFolders(prevFolders => prevFolders.map(folder => folder.name === folderName ? {\n      ...folder,\n      isOpen: !folder.isOpen\n    } : folder));\n  };\n\n  // Fetch files when the component mounts\n  useEffect(() => {\n    async function fetchFiles() {\n      try {\n        const responses = await Promise.all([fetch('/example-code/apis.py'), fetch('/example-code/parse.py'), fetch('/example-code/format.py')]);\n        if (responses.every(response => response.ok)) {\n          const [apiText, parseText, setupText] = await Promise.all(responses.map(response => response.text()));\n          console.log(apiText);\n          const newFiles = [{\n            name: \"apis.py\",\n            content: apiText,\n            linesToColor: {\n              \"\": [],\n              \"Parse info into files\": [],\n              \"Format and Display Pics\": [],\n              \"Connect Doordash API\": [15, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114],\n              \"Read Menu to JSON\": [19, 20, 21, 22, 23, 17, 18],\n              \"Format Footer\": []\n            }\n          }, {\n            name: \"parse.py\",\n            content: parseText,\n            linesToColor: {\n              \"\": [],\n              \"Parse info into files\": [],\n              \"Format and Display Pics\": [],\n              \"Connect Doordash API\": [],\n              \"Read Menu to JSON\": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38],\n              \"Format Footer\": []\n            }\n          }, {\n            name: \"format.py\",\n            content: setupText,\n            linesToColor: {\n              \"\": [],\n              \"Parse info into files\": [],\n              \"Format and Display Pics\": [],\n              \"Connect Doordash API\": [],\n              \"Read Menu to JSON\": [6, 7, 8],\n              \"Format Footer\": []\n            }\n          }];\n          setFiles(newFiles);\n          setCurrentFile(newFiles[0]);\n        } else {\n          throw new Error('Failed to fetch one or more files');\n        }\n      } catch (error) {\n        console.error(\"Error fetching files:\", error);\n      }\n    }\n    fetchFiles();\n  }, []);\n  const handleContentChange = useCallback(({\n    name,\n    content,\n    linesToColor\n  }) => {\n    if (currentFile) {\n      const updatedFiles = files.map(file => {\n        if (file.name === currentFile.name) {\n          console.log(\"Updating file:\", file.name);\n          return {\n            ...file,\n            content,\n            ...(linesToColor && {\n              linesToColor\n            })\n          };\n        }\n        return file;\n      });\n      setFiles(updatedFiles);\n      setCurrentFile(prev => ({\n        ...prev,\n        content,\n        ...(linesToColor && {\n          linesToColor\n        })\n      }));\n    }\n  }, [currentFile, files]);\n  const handleButtonClick = buttonName => {\n    setActiveButton(buttonName);\n  };\n  const handleEditOutlineClick = () => {\n    setShowPopup(true);\n    setEditedFolders([...folders]);\n  };\n  const handlePopupClose = () => {\n    setShowPopup(false);\n  };\n  if (!currentFile) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading files...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 28\n  }, this);\n\n  // Main App\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"vscode-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"vscode-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"editor\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-placeholder\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"editor-title\",\n            children: [\"Outline\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-symbols-outlined help\",\n              children: \"help\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FolderStructure, {\n            folders: folders,\n            onToggleFolder: toggleFolder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"edit-outline-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"primary-button edit-outline\",\n            onClick: handleEditOutlineClick,\n            children: \"Edit Outline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        className: \"terminal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-window\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-selector\",\n            children: files.map(file => {\n              const is_highlighted = file.linesToColor[outlineID].length !== 0;\n              const is_hidden = outlineID !== \"Read Menu to JSON\" && file.name === \"format.py\";\n              const buttonStyle = is_highlighted ? {\n                borderBottom: `8px solid ${colorToUse}`\n              } : {};\n              const buttonClass = is_hidden ? \"filename-button-hidden\" : \"filename-button\";\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                style: buttonStyle,\n                className: buttonClass,\n                onClick: () => setCurrentFile(file),\n                children: file.name\n              }, file.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Editor, {\n            linesToColor: currentFile.linesToColor[outlineID],\n            colorToUse: colorToUse,\n            currentFile: currentFile,\n            onContentChange: handleContentChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(Popup, {\n      onClose: handlePopupClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n  function FolderStructure({\n    folders,\n    onToggleFolder\n  }) {\n    _s();\n    const [totalHeight, setTotalHeight] = useState(0);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-structure\",\n      children: folders.map((folder, index) => /*#__PURE__*/_jsxDEV(FolderItem, {\n        folder: folder,\n        index: index,\n        totalHeight: totalHeight,\n        setTotalHeight: setTotalHeight,\n        onToggleFolder: onToggleFolder,\n        setOutlineID: setOutlineID // Pass setOutlineID as a prop\n        ,\n        setColorToUse: setColorToUse // Pass setColorToUse as a prop\n      }, folder.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this);\n  }\n  _s(FolderStructure, \"Tkjh7eE4zD5uly5eOXxLIFsQmhg=\");\n  function FolderItem({\n    folder,\n    index,\n    totalHeight,\n    setTotalHeight,\n    onToggleFolder,\n    setOutlineID,\n    setColorToUse\n  }) {\n    _s2();\n    const {\n      getCollapseProps,\n      getToggleProps,\n      isExpanded\n    } = useCollapse({\n      defaultExpanded: folder.isOpen\n    });\n    const folderHeight = isExpanded ? 30 + folder.children.length * 20 : 30;\n    const top = index === 0 ? 0 : totalHeight;\n    const handleSubfolderClick = (e, subfolderName) => {\n      e.preventDefault();\n      e.stopPropagation();\n      if (outlineID === subfolderName) {\n        setOutlineID(\"\");\n      } else {\n        setOutlineID(subfolderName);\n      }\n      console.log(subfolderName);\n      if (subfolderName === subfolderList[0]) {\n        setColorToUse(\"#32D4CC\");\n      } else if (subfolderName === subfolderList[1]) {\n        setColorToUse(\"#FFEA99\");\n      } else if (subfolderName === subfolderList[2]) {\n        setColorToUse(\"#7F83D3\");\n      } else if (subfolderName === subfolderList[3]) {\n        setColorToUse(\"#D47F9D\");\n      } else if (subfolderName === subfolderList[4]) {\n        setColorToUse(\"#7FADD3\");\n      } else {\n        setColorToUse(\"red\");\n      }\n    };\n    const [connections, setConnections] = useState([]);\n    const handleClosePopup = () => {\n      setShowPopup(false);\n    };\n    const [arrows, setArrows] = useState([]);\n    const addArrow = ({\n      start,\n      end\n    }) => {\n      setArrows([...arrows, {\n        start,\n        end\n      }]);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-item\",\n      style: {\n        top\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-toggle\",\n        onClick: () => onToggleFolder(folder.name)\n        // {...getToggleProps()}\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `material-symbols-outlined ${isExpanded ? \"folder-open\" : \"folder\"}`,\n          children: \"chevron_right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"folder-name\",\n          children: folder.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), folder.children && isExpanded && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"subfolders\",\n        ...getCollapseProps(),\n        children: folder.children.map(subfolder => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"subfolder-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"subfolder-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"subfolder-text\",\n              onClick: e => handleSubfolderClick(e, subfolder.name),\n              style: {\n                color: subfolder.name === outlineID ? colorToUse : 'white',\n                fontWeight: subfolder.name === outlineID ? \"bold\" : \"normal\"\n              },\n              children: subfolder.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              addArrow: addArrow,\n              handler: \"right\",\n              boxId: subfolder.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this), arrows.map(ar => /*#__PURE__*/_jsxDEV(Xarrow, {\n            start: ar.start,\n            end: ar.end\n          }, ar.start + \"-.\" + ar.end, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this))]\n        }, subfolder.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this), connections.map((conn, idx) => /*#__PURE__*/_jsxDEV(Xarrow, {\n        start: conn.start,\n        end: conn.end,\n        startAnchor: \"auto\",\n        endAnchor: \"auto\",\n        color: \"magenta\"\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this);\n  }\n  _s2(FolderItem, \"H/5Huuikr7cY/PdSroGrwK13k0Q=\", false, function () {\n    return [useCollapse];\n  });\n  function Popup({\n    onClose\n  }) {\n    _s3();\n    const [editedFolders, setEditedFolders] = useState([...folders]);\n    const handleFolderNameChange = (e, folderIndex) => {\n      const newFolders = editedFolders.map((folder, index) => {\n        if (index === folderIndex) {\n          return {\n            ...folder,\n            name: e.target.value\n          };\n        }\n        return folder;\n      });\n      setEditedFolders(newFolders);\n    };\n    const handleSubfolderNameChange = (e, folderIndex, subfolderIndex) => {\n      const newFolders = editedFolders.map((folder, index) => {\n        if (index === folderIndex) {\n          const newChildren = folder.children.map((subfolder, subIndex) => {\n            if (subIndex === subfolderIndex) {\n              return {\n                ...subfolder,\n                name: e.target.value\n              };\n            }\n            return subfolder;\n          });\n          return {\n            ...folder,\n            children: newChildren\n          };\n        }\n        return folder;\n      });\n      setEditedFolders(newFolders);\n    };\n    const renderFolder = (folder, folderIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-folder\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: folder.name,\n        onChange: e => handleFolderNameChange(e, folderIndex)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), folder.children && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"popup-subfolders\",\n        children: folder.children.map((subfolder, subfolderIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"popup-subfolder\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: subfolder.name,\n            onChange: e => handleSubfolderNameChange(e, folderIndex, subfolderIndex)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 17\n          }, this)\n        }, subfolderIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }, this)]\n    }, folderIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"popup-title\",\n          children: \"Bakery Website\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"popup-close\",\n          onClick: onClose,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-content\",\n        children: editedFolders.map((folder, folderIndex) => renderFolder(folder, folderIndex))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"popup-button cancel\",\n          onClick: onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"popup-button save\",\n          onClick: () => {\n            onClose();\n            setFolders(editedFolders);\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this);\n  }\n  _s3(Popup, \"U1twg9nE1lscc98VMEIHDZ55xxM=\");\n}\n_s4(Outline, \"6Z8luSH+hII8/4J8xJj6MLoZPyI=\");\n_c = Outline;\nvar _c;\n$RefreshReg$(_c, \"Outline\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Editor","useCollapse","Xarrow","Box","jsxDEV","_jsxDEV","Outline","props","_s4","_s","$RefreshSig$","_s2","_s3","Configuration","OpenAIApi","require","files","setFiles","currentFile","setCurrentFile","outlineID","setOutlineID","colorToUse","setColorToUse","activeButton","setActiveButton","showPopup","setShowPopup","editedFolders","setEditedFolders","folders","setFolders","name","children","isOpen","extractChildrenNames","flatMap","folder","map","child","subfolderList","toggleFolder","folderName","prevFolders","fetchFiles","responses","Promise","all","fetch","every","response","ok","apiText","parseText","setupText","text","console","log","newFiles","content","linesToColor","Error","error","handleContentChange","updatedFiles","file","prev","handleButtonClick","buttonName","handleEditOutlineClick","handlePopupClose","fileName","_jsxFileName","lineNumber","columnNumber","className","FolderStructure","onToggleFolder","onClick","is_highlighted","length","is_hidden","buttonStyle","borderBottom","buttonClass","style","onContentChange","Popup","onClose","totalHeight","setTotalHeight","index","FolderItem","getCollapseProps","getToggleProps","isExpanded","defaultExpanded","folderHeight","top","handleSubfolderClick","e","subfolderName","preventDefault","stopPropagation","connections","setConnections","handleClosePopup","arrows","setArrows","addArrow","start","end","subfolder","class","color","fontWeight","handler","boxId","ar","conn","idx","startAnchor","endAnchor","handleFolderNameChange","folderIndex","newFolders","target","value","handleSubfolderNameChange","subfolderIndex","newChildren","subIndex","renderFolder","type","onChange","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/outline.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Editor from \"./editor\";\nimport \"./outline.css\";\nimport { useCollapse } from \"react-collapsed\";\nimport Xarrow from 'react-xarrows';\nimport { Box } from \"./box\";\n\n\nexport function Outline(props) {\n  const { Configuration, OpenAIApi } = require(\"openai\");\n\n  const [files, setFiles] = useState([]);\n  const [currentFile, setCurrentFile] = useState(null);\n  const [outlineID, setOutlineID] = useState(\"\");\n  const [colorToUse, setColorToUse] = useState(\"\");\n  const [activeButton, setActiveButton] = useState(\"\");\n  const [showPopup, setShowPopup] = useState(false);\n\n  const [editedFolders, setEditedFolders] = useState([]);\n  // Define folder structure and toggle functionality\n  const [folders, setFolders] = useState([\n    {\n      name: \"Home Page\",\n      children: [\n        { name: \"Parse info into files\" },\n        { name: \"Format and Display Pics\" },\n      ],\n      isOpen: false,\n    },\n    {\n      name: \"Order Online\",\n      children: [\n        { name: \"Connect Doordash API\" },\n        { name: \"Read Menu to JSON\" },\n      ],\n      isOpen: false,\n    },\n    {\n      name: \"Contact Us\",\n      children: [\n        { name: \"Format Footer\" }\n      ],\n      isOpen: false,\n    },\n  ]);\n\n  const extractChildrenNames = (folders) => {\n    return folders.flatMap(folder => folder.children.map(child => child.name));\n  };\n\n  const subfolderList = extractChildrenNames(folders);\n\n  const toggleFolder = (folderName) => {\n    setFolders(prevFolders =>\n      prevFolders.map(folder =>\n        folder.name === folderName ? { ...folder, isOpen: !folder.isOpen } : folder\n      )\n    );\n  };\n\n  // Fetch files when the component mounts\n  useEffect(() => {\n    async function fetchFiles() {\n      try {\n        const responses = await Promise.all([\n          fetch('/example-code/apis.py'),\n          fetch('/example-code/parse.py'),\n          fetch('/example-code/format.py')\n        ]);\n        if (responses.every(response => response.ok)) {\n          const [apiText, parseText, setupText] = await Promise.all(responses.map(response => response.text()));\n          console.log(apiText);\n          const newFiles = [\n            {\n              name: \"apis.py\",\n              content: apiText,\n              linesToColor: {\n                \"\": [],\n                \"Parse info into files\": [],\n                \"Format and Display Pics\": [],\n                \"Connect Doordash API\": [15, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114],\n                \"Read Menu to JSON\": [19, 20, 21, 22, 23, 17, 18],\n                \"Format Footer\": []\n              },\n            },\n            {\n              name: \"parse.py\",\n              content: parseText,\n              linesToColor: { \"\": [],\n                \"Parse info into files\": [],\n                \"Format and Display Pics\": [],\n                \"Connect Doordash API\": [],\n                \"Read Menu to JSON\": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38],\n                \"Format Footer\": []\n              },\n            },\n            {\n              name: \"format.py\",\n              content: setupText,\n              linesToColor: { \"\": [],\n                \"Parse info into files\": [],\n                \"Format and Display Pics\": [],\n                \"Connect Doordash API\": [],\n                \"Read Menu to JSON\": [6, 7, 8],\n                \"Format Footer\": []\n              },\n            }\n          ];\n          setFiles(newFiles);\n          setCurrentFile(newFiles[0]);\n        } else {\n          throw new Error('Failed to fetch one or more files');\n        }\n      } catch (error) {\n        console.error(\"Error fetching files:\", error);\n      }\n    }\n    fetchFiles();\n  }, []);\n\n  const handleContentChange = useCallback(\n    ({ name, content, linesToColor }) => {\n      if (currentFile) {\n        const updatedFiles = files.map(file => {\n          if (file.name === currentFile.name) {\n            console.log(\"Updating file:\", file.name);\n            return { ...file, content, ...(linesToColor && { linesToColor }) };\n          }\n          return file;\n        });\n        setFiles(updatedFiles);\n        setCurrentFile(prev => ({\n          ...prev,\n          content,\n          ...(linesToColor && { linesToColor })\n        }));\n      }\n    },\n    [currentFile, files]\n  );\n  \n  const handleButtonClick = (buttonName) => {\n    setActiveButton(buttonName);\n  };\n\n  const handleEditOutlineClick = () => {\n    setShowPopup(true);\n    setEditedFolders([...folders]);\n  };\n\n  const handlePopupClose = () => {\n    setShowPopup(false);\n  };\n\n  if (!currentFile) return <div>Loading files...</div>; \n\n  // Main App\n  return (\n    <div className=\"vscode-app\">\n      <main className=\"vscode-main\">\n        <section className=\"editor\">\n          <div className=\"editor-placeholder\">\n            <h1 className=\"editor-title\">\n              Outline\n              <span className=\"material-symbols-outlined help\">help</span>\n            </h1>\n            <FolderStructure\n                folders={folders}\n                onToggleFolder={toggleFolder}\n            />\n          </div>\n            {/* Folder structure component */}\n          <div className=\"edit-outline-container\">\n            {/* Popup Code */}\n            <button\n              className=\"primary-button edit-outline\"\n              onClick={handleEditOutlineClick}\n            >\n              Edit Outline\n            </button>\n          </div>\n        </section>\n\n        <aside className=\"terminal\">\n          <div className=\"editor-window\">\n            <div className=\"file-selector\">\n              {files.map((file) => {\n                const is_highlighted =\n                  file.linesToColor[outlineID].length !== 0;\n                const is_hidden = outlineID !== \"Read Menu to JSON\" && file.name === \"format.py\";\n                const buttonStyle = is_highlighted\n                  ? { borderBottom: `8px solid ${colorToUse}` }\n                  : {};\n                const buttonClass = is_hidden\n                  ? \"filename-button-hidden\"\n                  : \"filename-button\";\n\n                return (\n                  <button\n                    style={buttonStyle}\n                    className={buttonClass}\n                    key={file.name}\n                    onClick={() => setCurrentFile(file)}\n                  >\n                    {file.name}\n                  </button>\n                );\n              })}\n            </div>\n            <Editor\n              linesToColor={currentFile.linesToColor[outlineID]}\n              colorToUse={colorToUse}\n              currentFile={currentFile}\n              onContentChange={handleContentChange}\n            />\n          </div>\n        </aside>\n      </main>\n      {showPopup && <Popup onClose={handlePopupClose} />}\n    </div>\n  );\n\n  function FolderStructure({ folders, onToggleFolder }) {\n    const [totalHeight, setTotalHeight] = useState(0);\n\n    return (\n      <div className=\"folder-structure\">\n        {folders.map((folder, index) => (\n          <FolderItem\n            key={folder.name}\n            folder={folder}\n            index={index}\n            totalHeight={totalHeight}\n            setTotalHeight={setTotalHeight}\n            onToggleFolder={onToggleFolder}\n            setOutlineID={setOutlineID} // Pass setOutlineID as a prop\n            setColorToUse={setColorToUse} // Pass setColorToUse as a prop\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function FolderItem({\n    folder,\n    index,\n    totalHeight,\n    setTotalHeight,\n    onToggleFolder,\n    setOutlineID,\n    setColorToUse,\n  }) {\n    const { getCollapseProps, getToggleProps, isExpanded } = useCollapse({\n      defaultExpanded: folder.isOpen,\n    });\n\n    const folderHeight = isExpanded ? 30 + folder.children.length * 20 : 30;\n    const top = index === 0 ? 0 : totalHeight;\n\n    const handleSubfolderClick = (e, subfolderName) => {\n      e.preventDefault();\n      e.stopPropagation();\n      if (outlineID === subfolderName) {\n        setOutlineID(\"\");\n      } else {\n        setOutlineID(subfolderName)\n      }\n      console.log(subfolderName);\n      if (subfolderName === subfolderList[0]) {\n        setColorToUse(\"#32D4CC\");\n      } else if (subfolderName === subfolderList[1]) {\n        setColorToUse(\"#FFEA99\");\n      } else if (subfolderName === subfolderList[2]) {\n        setColorToUse(\"#7F83D3\");\n      } else if (subfolderName === subfolderList[3]) {\n        setColorToUse(\"#D47F9D\");\n      } else if (subfolderName === subfolderList[4]) {\n        setColorToUse(\"#7FADD3\");\n      } else {\n        setColorToUse(\"red\");\n      }\n    };\n\n    const [connections, setConnections] = useState([]);\n\n    const handleClosePopup = () => {\n      setShowPopup(false);\n    };\n    const [arrows, setArrows] = useState([]);\n    const addArrow = ({ start, end }) => {\n      setArrows([...arrows, { start, end }]);\n    };\n\n    return (\n      <div className=\"folder-item\" style={{ top }}>\n        <div\n          className=\"folder-toggle\"\n          onClick={() => onToggleFolder(folder.name)}\n          // {...getToggleProps()}\n        >\n          <span\n            className={`material-symbols-outlined ${\n              isExpanded ? \"folder-open\" : \"folder\"\n            }`}\n          >\n            chevron_right\n          </span>\n          <span className=\"folder-name\">{folder.name}</span>\n        </div>\n        {folder.children && isExpanded && (\n          <ul className=\"subfolders\" {...getCollapseProps()}>\n            {folder.children.map((subfolder) => (\n              <li key={subfolder.name} className=\"subfolder-item\">\n              <div class=\"subfolder-box\">\n              <div class=\"subfolder-text\" \n              onClick={(e) => handleSubfolderClick(e, subfolder.name)}\n              style={{\n                color: subfolder.name === outlineID ? colorToUse : 'white',\n                fontWeight: subfolder.name === outlineID ? \"bold\" : \"normal\"\n              }}>\n                {subfolder.name}\n              </div>\n              <Box\n                addArrow={addArrow}\n                handler=\"right\"\n                boxId={subfolder.name}\n              />\n              </div>\n              {arrows.map(ar => (\n              <Xarrow\n                start={ar.start}\n                end={ar.end}\n                key={ar.start + \"-.\" + ar.end}\n              />\n              ))}\n              </li>\n            ))}\n          </ul>\n        )}\n        {connections.map((conn, idx) => (\n          <Xarrow\n            key={idx}\n            start={conn.start}\n            end={conn.end}\n            startAnchor=\"auto\"\n            endAnchor=\"auto\"\n            color=\"magenta\"\n          />\n        ))}\n      </div>\n    );\n  }\n\n\n  function Popup({ onClose }) {\n    const [editedFolders, setEditedFolders] = useState([...folders]);\n\n    const handleFolderNameChange = (e, folderIndex) => {\n      const newFolders = editedFolders.map((folder, index) => {\n        if (index === folderIndex) {\n          return { ...folder, name: e.target.value };\n        }\n        return folder;\n      });\n      setEditedFolders(newFolders);\n    };\n  \n    const handleSubfolderNameChange = (e, folderIndex, subfolderIndex) => {\n      const newFolders = editedFolders.map((folder, index) => {\n        if (index === folderIndex) {\n          const newChildren = folder.children.map((subfolder, subIndex) => {\n            if (subIndex === subfolderIndex) {\n              return { ...subfolder, name: e.target.value };\n            }\n            return subfolder;\n          });\n          return { ...folder, children: newChildren };\n        }\n        return folder;\n      });\n      setEditedFolders(newFolders);\n    };\n\n    const renderFolder = (folder, folderIndex) => (\n      <div key={folderIndex} className=\"popup-folder\">\n        <input\n          type=\"text\"\n          value={folder.name}\n          onChange={(e) => handleFolderNameChange(e, folderIndex)}\n        />\n        {folder.children && (\n          <ul className=\"popup-subfolders\">\n            {folder.children.map((subfolder, subfolderIndex) => (\n              <li key={subfolderIndex} className=\"popup-subfolder\">\n                <input\n                  type=\"text\"\n                  value={subfolder.name}\n                  onChange={(e) => handleSubfolderNameChange(e, folderIndex, subfolderIndex)}\n                />\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    );\n\n    return (\n      <div className=\"popup\">\n        <div className=\"popup-header\">\n          <h2 className=\"popup-title\">Bakery Website</h2>\n          <button className=\"popup-close\" onClick={onClose}>\n            &times;\n          </button>\n        </div>\n        <div className=\"popup-content\">\n          {editedFolders.map((folder, folderIndex) => renderFolder(folder, folderIndex))}\n        </div>\n        <div className=\"popup-footer\">\n          <button className=\"popup-button cancel\" onClick={onClose}>Cancel</button>\n          <button className=\"popup-button save\" onClick={() => { onClose(); setFolders(editedFolders); }}>Save</button>\n        </div>\n      </div>\n    );\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}