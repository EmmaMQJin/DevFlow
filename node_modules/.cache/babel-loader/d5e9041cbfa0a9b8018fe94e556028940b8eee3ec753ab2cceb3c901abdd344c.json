{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { EditorState, StateEffect, StateField } from '@codemirror/state';\nimport { EditorView, lineNumbers, Decoration, gutter } from '@codemirror/view';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = ({\n  value,\n  onChange,\n  specialLineNumbers\n}) => {\n  _s();\n  const editorParentRef = useRef(null);\n  useEffect(() => {\n    if (!editorParentRef.current) return;\n\n    // Define the effect to update special line number decorations\n    const updateSpecialLines = StateEffect.define();\n    const specialLinesField = StateField.define({\n      create() {\n        return Decoration.none;\n      },\n      update(decorations, tr) {\n        decorations = decorations.map(tr.changes);\n        for (let effect of tr.effects) {\n          if (effect.is(updateSpecialLines)) {\n            return effect.value;\n          }\n        }\n        return decorations;\n      },\n      provide: f => EditorView.decorations.from(f)\n    });\n\n    // Function to create decorations for special line numbers\n    const createSpecialLineNumberDecorations = view => {\n      const builder = new Decoration.setBuilder();\n      specialLineNumbers.forEach(lineNumber => {\n        const line = view.state.doc.line(lineNumber);\n        if (line) {\n          builder.add(line.from, line.to, Decoration.line({\n            class: 'special-line-number'\n          }));\n        }\n      });\n      return builder.finish();\n    };\n\n    // Initial editor state\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [lineNumbers(), javascript(), specialLinesField, EditorView.updateListener.of(viewUpdate => {\n        if (viewUpdate.docChanged || viewUpdate.viewportChanged) {\n          const decorations = createSpecialLineNumberDecorations(viewUpdate.view);\n          viewUpdate.view.dispatch({\n            effects: updateSpecialLines.of(decorations)\n          });\n        }\n      }), EditorView.baseTheme({\n        '.cm-lineNumbers .cm-gutterElement': {\n          color: '#000' // Default line number color\n        },\n        '.special-line-number .cm-gutterElement': {\n          color: '#f00' // Special line numbers color\n        }\n      })]\n    });\n    const view = new EditorView({\n      state: startState,\n      parent: editorParentRef.current\n    });\n    return () => {\n      view.destroy();\n    };\n  }, [value, onChange, specialLineNumbers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorParentRef,\n    style: {\n      height: '400px',\n      border: '1px solid black'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this);\n};\n_s(Editor, \"3VSnVeRbSyLoDWyoLSw9+RxgoHw=\");\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","EditorState","StateEffect","StateField","EditorView","lineNumbers","Decoration","gutter","javascript","jsxDEV","_jsxDEV","Editor","value","onChange","specialLineNumbers","_s","editorParentRef","current","updateSpecialLines","define","specialLinesField","create","none","update","decorations","tr","map","changes","effect","effects","is","provide","f","from","createSpecialLineNumberDecorations","view","builder","setBuilder","forEach","lineNumber","line","state","doc","add","to","class","finish","startState","extensions","updateListener","of","viewUpdate","docChanged","viewportChanged","dispatch","baseTheme","color","parent","destroy","ref","style","height","border","fileName","_jsxFileName","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { EditorState, StateEffect, StateField } from '@codemirror/state';\nimport { EditorView, lineNumbers, Decoration, gutter } from '@codemirror/view';\nimport { javascript } from '@codemirror/lang-javascript';\n\nconst Editor = ({ value, onChange, specialLineNumbers }) => {\n  const editorParentRef = useRef(null);\n\n  useEffect(() => {\n    if (!editorParentRef.current) return;\n\n    // Define the effect to update special line number decorations\n    const updateSpecialLines = StateEffect.define();\n    const specialLinesField = StateField.define({\n      create() {\n        return Decoration.none;\n      },\n      update(decorations, tr) {\n        decorations = decorations.map(tr.changes);\n        for (let effect of tr.effects) {\n          if (effect.is(updateSpecialLines)) {\n            return effect.value;\n          }\n        }\n        return decorations;\n      },\n      provide: f => EditorView.decorations.from(f)\n    });\n\n    // Function to create decorations for special line numbers\n    const createSpecialLineNumberDecorations = (view) => {\n      const builder = new Decoration.setBuilder();\n      specialLineNumbers.forEach(lineNumber => {\n        const line = view.state.doc.line(lineNumber);\n        if (line) {\n          builder.add(line.from, line.to, Decoration.line({\n            class: 'special-line-number'\n          }));\n        }\n      });\n      return builder.finish();\n    };\n\n    // Initial editor state\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [\n        lineNumbers(),\n        javascript(),\n        specialLinesField,\n        EditorView.updateListener.of(viewUpdate => {\n          if (viewUpdate.docChanged || viewUpdate.viewportChanged) {\n            const decorations = createSpecialLineNumberDecorations(viewUpdate.view);\n            viewUpdate.view.dispatch({\n              effects: updateSpecialLines.of(decorations)\n            });\n          }\n        }),\n        EditorView.baseTheme({\n          '.cm-lineNumbers .cm-gutterElement': {\n            color: '#000', // Default line number color\n          },\n          '.special-line-number .cm-gutterElement': {\n            color: '#f00', // Special line numbers color\n          }\n        })\n      ],\n    });\n\n    const view = new EditorView({\n      state: startState,\n      parent: editorParentRef.current,\n    });\n\n    return () => {\n      view.destroy();\n    };\n  }, [value, onChange, specialLineNumbers]);\n\n  return <div ref={editorParentRef} style={{ height: '400px', border: '1px solid black' }} />;\n};\n\nexport default Editor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}