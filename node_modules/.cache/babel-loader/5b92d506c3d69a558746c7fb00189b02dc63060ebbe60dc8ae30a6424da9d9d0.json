{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker, Decoration, lineNumbers } from '@codemirror/view';\nimport { javascript } from '@codemirror/lang-javascript';\n\n// Define a custom GutterMarker for styling specific line numbers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass SpecialLineMarker extends GutterMarker {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.color = this.color; // Apply the specified color\n    marker.textContent = '•'; // Custom marker symbol, can be adjusted\n    return marker;\n  }\n}\n\n// Function to create decorations for special lines\nconst createSpecialLineDecorations = linesToMarkInRed => {\n  const decorations = [];\n  for (const {\n    line,\n    color\n  } of linesToMarkInRed) {\n    // Adjust line number to position (CodeMirror lines are 0-indexed)\n    const widget = new SpecialLineMarker(color);\n    // Create a line decoration using our custom marker\n    const deco = Decoration.widget({\n      widget,\n      side: -1\n    }).range(line - 1);\n    decorations.push(deco);\n  }\n  return Decoration.set(decorations, true);\n};\nconst Editor = ({\n  value,\n  linesToMarkInRed\n}) => {\n  _s();\n  const editorParentRef = useRef(null);\n  useEffect(() => {\n    if (!editorParentRef.current) return;\n\n    // Initialize the editor with our custom gutter and decorations\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [javascript(), lineNumbers(), gutter(),\n      // Ensure the default gutter is enabled\n      EditorView.decorations.of(createSpecialLineDecorations(linesToMarkInRed))]\n    });\n    const editorView = new EditorView({\n      state: startState,\n      parent: editorParentRef.current\n    });\n    return () => {\n      editorView.destroy();\n    };\n  }, [value, linesToMarkInRed]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorParentRef,\n    className: \"editor-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n_s(Editor, \"3VSnVeRbSyLoDWyoLSw9+RxgoHw=\");\n_c = Editor;\nexport default Editor;\n\n// import React, { useEffect, useRef } from 'react';\n// import { EditorState } from '@codemirror/state';\n// import { EditorView, lineNumbers } from '@codemirror/view';\n// import { javascript } from '@codemirror/lang-javascript';\n\n// const Editor = ({ value, onChange }) => {\n//   const editorParentRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!editorParentRef.current) return;\n\n//     // Line numbers styling extension\n//     const customLineNumberStyle = EditorView.baseTheme({\n//       '.cm-lineNumbers .cm-gutterElement': {\n//         color: '#f00', // Example color: red\n//         fontFamily: 'Monaco, monospace',\n//         fontSize: '0.85em',\n//       }\n//     });\n\n//     const startState = EditorState.create({\n//       doc: value,\n//       extensions: [lineNumbers(), customLineNumberStyle, javascript()],\n//     });\n\n//     const view = new EditorView({\n//       state: startState,\n//       parent: editorParentRef.current,\n//     });\n\n//     // Cleanup to avoid memory leaks\n//     return () => {\n//       view.destroy();\n//     };\n//   }, [value, onChange]);\n\n//   return <div ref={editorParentRef} style={{ border: '1px solid #ddd', height: '400px' }} />;\n// };\n\n// export default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","EditorState","EditorView","gutter","GutterMarker","Decoration","lineNumbers","javascript","jsxDEV","_jsxDEV","SpecialLineMarker","constructor","color","toDOM","marker","document","createElement","style","textContent","createSpecialLineDecorations","linesToMarkInRed","decorations","line","widget","deco","side","range","push","set","Editor","value","_s","editorParentRef","current","startState","create","doc","extensions","of","editorView","state","parent","destroy","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker, Decoration, lineNumbers } from '@codemirror/view';\nimport { javascript } from '@codemirror/lang-javascript';\n\n// Define a custom GutterMarker for styling specific line numbers\nclass SpecialLineMarker extends GutterMarker {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.color = this.color; // Apply the specified color\n    marker.textContent = '•'; // Custom marker symbol, can be adjusted\n    return marker;\n  }\n}\n\n// Function to create decorations for special lines\nconst createSpecialLineDecorations = (linesToMarkInRed) => {\n  const decorations = [];\n  for (const { line, color } of linesToMarkInRed) {\n    // Adjust line number to position (CodeMirror lines are 0-indexed)\n    const widget = new SpecialLineMarker(color);\n    // Create a line decoration using our custom marker\n    const deco = Decoration.widget({ widget, side: -1 }).range(line - 1);\n    decorations.push(deco);\n  }\n  return Decoration.set(decorations, true);\n}\n\nconst Editor = ({ value, linesToMarkInRed }) => {\n  const editorParentRef = useRef(null);\n\n  useEffect(() => {\n    if (!editorParentRef.current) return;\n\n    // Initialize the editor with our custom gutter and decorations\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [\n        javascript(),\n        lineNumbers(),\n        gutter(), // Ensure the default gutter is enabled\n        EditorView.decorations.of(createSpecialLineDecorations(linesToMarkInRed))\n      ],\n    });\n\n    const editorView = new EditorView({\n      state: startState,\n      parent: editorParentRef.current,\n    });\n\n    return () => {\n      editorView.destroy();\n    };\n  }, [value, linesToMarkInRed]);\n\n  return <div ref={editorParentRef} className=\"editor-container\" />;\n};\n\nexport default Editor;\n\n\n\n\n\n\n// import React, { useEffect, useRef } from 'react';\n// import { EditorState } from '@codemirror/state';\n// import { EditorView, lineNumbers } from '@codemirror/view';\n// import { javascript } from '@codemirror/lang-javascript';\n\n// const Editor = ({ value, onChange }) => {\n//   const editorParentRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!editorParentRef.current) return;\n\n//     // Line numbers styling extension\n//     const customLineNumberStyle = EditorView.baseTheme({\n//       '.cm-lineNumbers .cm-gutterElement': {\n//         color: '#f00', // Example color: red\n//         fontFamily: 'Monaco, monospace',\n//         fontSize: '0.85em',\n//       }\n//     });\n\n//     const startState = EditorState.create({\n//       doc: value,\n//       extensions: [lineNumbers(), customLineNumberStyle, javascript()],\n//     });\n\n//     const view = new EditorView({\n//       state: startState,\n//       parent: editorParentRef.current,\n//     });\n\n//     // Cleanup to avoid memory leaks\n//     return () => {\n//       view.destroy();\n//     };\n//   }, [value, onChange]);\n\n//   return <div ref={editorParentRef} style={{ border: '1px solid #ddd', height: '400px' }} />;\n// };\n\n// export default Editor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}