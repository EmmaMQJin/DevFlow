{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker, lineNumbers, Decoration, WidgetType } from '@codemirror/view';\nimport { basicSetup } from '@uiw/codemirror-extensions-basic-setup';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { python } from '@codemirror/lang-python';\n\n// Function to determine the language extension based on the file name\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLanguageExtension = fileName => {\n  if (fileName.endsWith('.js')) {\n    return javascript();\n  } else if (fileName.endsWith('.py')) {\n    return python();\n  }\n  return [];\n};\nclass ColoredGutterMarker extends GutterMarker {\n  constructor(color) {\n    super(); // Call the parent class constructor\n    this.color = color; // Store the color value\n  }\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.background = this.color;\n    marker.style.width = '5px'; // Set the width of the block\n    marker.style.height = '100%';\n    return marker;\n  }\n}\n// Editor component\nconst Editor = ({\n  linesToColor,\n  colorToUse,\n  currentFile,\n  onContentChange\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  console.log(\"editor file: \", currentFile);\n  useEffect(() => {\n    if (!editorRef.current) return;\n    // TODO: should we only update the actual content when we switch to other files??\n    // TODO: actually, when we switch context states, when we switch back, only then create\n    // a new editor and pull from the file contents?\n    const updateListener = EditorView.updateListener.of(update => {\n      // we just want to write to the file contents here\n      if (update.docChanged) {\n        const newContent = update.state.doc.toString();\n        console.log(\"new content:\", newContent);\n        onContentChange({\n          name: currentFile.name,\n          content: newContent\n        });\n      }\n    });\n\n    // Define gutter markers based on linesToColor\n    const gutterMarkers = linesToColor.reduce((acc, lineNumber) => {\n      const pos = currentFile.content.split('\\n').slice(0, lineNumber - 1).join('\\n').length;\n      if (pos >= 0) {\n        const marker = new ColoredGutterMarker(colorToUse);\n        acc.push(Decoration.widget({\n          widget: marker,\n          side: -1\n        }).range(pos));\n      }\n      return acc;\n    }, []);\n    const langExtension = getLanguageExtension(currentFile.name);\n    // Initialize editor state with custom gutter\n    const startState = EditorState.create({\n      doc: currentFile.content,\n      extensions: [\n      // gutter({\n      //   class: 'custom-gutter',\n      //   lineMarker: (view, line) => {\n      //     // Check if the current line number should have a marker\n      //     const lineNumber = view.state.doc.lineAt(line.from).number;\n      //     if (linesToColor.includes(lineNumber)) {\n      //       return new ColoredGutterMarker(colorToUse);\n      //     }\n      //     return null; \n      //   },\n      // }),\n      gutter({\n        class: 'custom-gutter'\n        // This approach does not directly use lineMarker, but uses the decoration API instead\n      }), EditorView.decorations.of(Decoration.set(gutterMarkers)), lineNumbers(), basicSetup(), langExtension, updateListener]\n    });\n\n    // Create a new EditorView if:\n    // the line numbers we want to color updates\n    const view = new EditorView({\n      state: startState,\n      parent: editorRef.current\n    });\n\n    // Cleanup function to destroy the editor view when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [currentFile.name, linesToColor]); //, currentFile.linesToColor Dependency array to re-initialize the editor if linesToColor change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorRef,\n    className: \"editor-div\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 10\n  }, this);\n};\n_s(Editor, \"FXGU5sRik9TpAO5B+Yli91RwFDk=\");\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","EditorState","EditorView","gutter","GutterMarker","lineNumbers","Decoration","WidgetType","basicSetup","javascript","python","jsxDEV","_jsxDEV","getLanguageExtension","fileName","endsWith","ColoredGutterMarker","constructor","color","toDOM","marker","document","createElement","style","background","width","height","Editor","linesToColor","colorToUse","currentFile","onContentChange","_s","editorRef","console","log","current","updateListener","of","update","docChanged","newContent","state","doc","toString","name","content","gutterMarkers","reduce","acc","lineNumber","pos","split","slice","join","length","push","widget","side","range","langExtension","startState","create","extensions","class","decorations","set","view","parent","destroy","ref","className","_jsxFileName","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker, lineNumbers, Decoration, WidgetType } from '@codemirror/view';\nimport { basicSetup } from '@uiw/codemirror-extensions-basic-setup';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { python } from '@codemirror/lang-python';\n\n// Function to determine the language extension based on the file name\nconst getLanguageExtension = (fileName) => {\n  if (fileName.endsWith('.js')) {\n    return javascript();\n  } else if (fileName.endsWith('.py')) {\n    return python();\n  }\n  return [];\n};\n\nclass ColoredGutterMarker extends GutterMarker {\n  constructor(color) {\n    super(); // Call the parent class constructor\n    this.color = color; // Store the color value\n  }\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.background = this.color;\n    marker.style.width = '5px'; // Set the width of the block\n    marker.style.height = '100%'\n    return marker;\n  }\n}\n// Editor component\nconst Editor = ({ linesToColor, colorToUse, currentFile, onContentChange }) => {\n  const editorRef = useRef(null);\n  console.log(\"editor file: \", currentFile);\n  useEffect(() => {\n    if (!editorRef.current) return;\n    // TODO: should we only update the actual content when we switch to other files??\n    // TODO: actually, when we switch context states, when we switch back, only then create\n    // a new editor and pull from the file contents?\n    const updateListener = EditorView.updateListener.of((update) => {\n      // we just want to write to the file contents here\n      if (update.docChanged) {\n        const newContent = update.state.doc.toString();\n        console.log(\"new content:\", newContent);\n        onContentChange({name: currentFile.name, content: newContent});\n      }\n    });\n\n    // Define gutter markers based on linesToColor\n    const gutterMarkers = linesToColor.reduce((acc, lineNumber) => {\n      const pos = currentFile.content.split('\\n').slice(0, lineNumber - 1).join('\\n').length;\n      if (pos >= 0) {\n        const marker = new ColoredGutterMarker(colorToUse);\n        acc.push(Decoration.widget({ widget: marker, side: -1 }).range(pos));\n      }\n      return acc;\n    }, []);\n\n    const langExtension = getLanguageExtension(currentFile.name);\n    // Initialize editor state with custom gutter\n    const startState = EditorState.create({\n      doc: currentFile.content,\n      extensions: [\n        // gutter({\n        //   class: 'custom-gutter',\n        //   lineMarker: (view, line) => {\n        //     // Check if the current line number should have a marker\n        //     const lineNumber = view.state.doc.lineAt(line.from).number;\n        //     if (linesToColor.includes(lineNumber)) {\n        //       return new ColoredGutterMarker(colorToUse);\n        //     }\n        //     return null; \n        //   },\n        // }),\n        gutter({\n          class: 'custom-gutter',\n          // This approach does not directly use lineMarker, but uses the decoration API instead\n        }),\n        EditorView.decorations.of(Decoration.set(gutterMarkers)),\n        lineNumbers(),\n        basicSetup(),\n        langExtension,\n        updateListener\n      ],\n    });\n\n    // Create a new EditorView if:\n      // the line numbers we want to color updates\n    const view = new EditorView({\n      state: startState,\n      parent: editorRef.current,\n    });\n\n    // Cleanup function to destroy the editor view when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [currentFile.name, linesToColor]); //, currentFile.linesToColor Dependency array to re-initialize the editor if linesToColor change\n\n  return <div ref={editorRef} className='editor-div' />;\n};\n\nexport default Editor;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}