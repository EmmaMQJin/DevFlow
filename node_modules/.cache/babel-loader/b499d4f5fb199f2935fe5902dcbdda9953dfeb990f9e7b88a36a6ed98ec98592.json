{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker } from '@codemirror/view';\nimport { javascript } from '@codemirror/lang-javascript';\n\n// Define a GutterMarker subclass for special line numbers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass SpecialLineMarker extends GutterMarker {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.color = this.color;\n    marker.textContent = '•'; // Example marker symbol\n    return marker;\n  }\n}\n\n// A utility function to add markers for special lines\nconst addSpecialLineMarkers = (view, specialLines) => {\n  specialLines.forEach(({\n    line,\n    color\n  }) => {\n    view.dispatch({\n      effects: view.state.facet(gutter).addMarker(view.state.doc.line(line).from, new SpecialLineMarker(color))\n    });\n  });\n};\nconst Editor = ({\n  value,\n  specialLines\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  useEffect(() => {\n    if (!editorRef.current) return;\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [javascript(), EditorView.editable.of(false), gutter({\n        class: \"cm-customGutter\",\n        markers: () => new SpecialLineMarker('default') // Placeholder for default styling\n      })\n      // lineNumbers(),\n      ]\n    });\n    const editorView = new EditorView({\n      state: startState,\n      parent: editorRef.current\n    });\n\n    // Add markers for special lines after the editor has been initialized\n    addSpecialLineMarkers(editorView, specialLines);\n    return () => editorView.destroy();\n  }, [value, specialLines]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 10\n  }, this);\n};\n_s(Editor, \"FXGU5sRik9TpAO5B+Yli91RwFDk=\");\n_c = Editor;\nexport default Editor;\n\n// import React, { useEffect, useRef } from 'react';\n// import { EditorState } from '@codemirror/state';\n// import { EditorView, lineNumbers } from '@codemirror/view';\n// import { javascript } from '@codemirror/lang-javascript';\n\n// const Editor = ({ value, onChange }) => {\n//   const editorParentRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!editorParentRef.current) return;\n\n//     // Line numbers styling extension\n//     const customLineNumberStyle = EditorView.baseTheme({\n//       '.cm-lineNumbers .cm-gutterElement': {\n//         color: '#f00', // Example color: red\n//         fontFamily: 'Monaco, monospace',\n//         fontSize: '0.85em',\n//       }\n//     });\n\n//     const startState = EditorState.create({\n//       doc: value,\n//       extensions: [lineNumbers(), customLineNumberStyle, javascript()],\n//     });\n\n//     const view = new EditorView({\n//       state: startState,\n//       parent: editorParentRef.current,\n//     });\n\n//     // Cleanup to avoid memory leaks\n//     return () => {\n//       view.destroy();\n//     };\n//   }, [value, onChange]);\n\n//   return <div ref={editorParentRef} style={{ border: '1px solid #ddd', height: '400px' }} />;\n// };\n\n// export default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","EditorState","EditorView","gutter","GutterMarker","javascript","jsxDEV","_jsxDEV","SpecialLineMarker","constructor","color","toDOM","marker","document","createElement","style","textContent","addSpecialLineMarkers","view","specialLines","forEach","line","dispatch","effects","state","facet","addMarker","doc","from","Editor","value","_s","editorRef","current","startState","create","extensions","editable","of","class","markers","editorView","parent","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker } from '@codemirror/view';\nimport { javascript } from '@codemirror/lang-javascript';\n\n// Define a GutterMarker subclass for special line numbers\nclass SpecialLineMarker extends GutterMarker {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.color = this.color;\n    marker.textContent = '•'; // Example marker symbol\n    return marker;\n  }\n}\n\n// A utility function to add markers for special lines\nconst addSpecialLineMarkers = (view, specialLines) => {\n  specialLines.forEach(({line, color}) => {\n    view.dispatch({\n      effects: view.state.facet(gutter).addMarker(view.state.doc.line(line).from, new SpecialLineMarker(color))\n    });\n  });\n};\n\nconst Editor = ({ value, specialLines }) => {\n  const editorRef = useRef(null);\n\n  useEffect(() => {\n    if (!editorRef.current) return;\n\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [\n        javascript(),\n        EditorView.editable.of(false),\n        gutter({\n          class: \"cm-customGutter\",\n          markers: () => new SpecialLineMarker('default'), // Placeholder for default styling\n        }),\n        // lineNumbers(),\n      ],\n    });\n\n    const editorView = new EditorView({\n      state: startState,\n      parent: editorRef.current,\n    });\n\n    // Add markers for special lines after the editor has been initialized\n    addSpecialLineMarkers(editorView, specialLines);\n\n    return () => editorView.destroy();\n  }, [value, specialLines]);\n\n  return <div ref={editorRef} />;\n};\n\nexport default Editor;\n\n\n\n\n// import React, { useEffect, useRef } from 'react';\n// import { EditorState } from '@codemirror/state';\n// import { EditorView, lineNumbers } from '@codemirror/view';\n// import { javascript } from '@codemirror/lang-javascript';\n\n// const Editor = ({ value, onChange }) => {\n//   const editorParentRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!editorParentRef.current) return;\n\n//     // Line numbers styling extension\n//     const customLineNumberStyle = EditorView.baseTheme({\n//       '.cm-lineNumbers .cm-gutterElement': {\n//         color: '#f00', // Example color: red\n//         fontFamily: 'Monaco, monospace',\n//         fontSize: '0.85em',\n//       }\n//     });\n\n//     const startState = EditorState.create({\n//       doc: value,\n//       extensions: [lineNumbers(), customLineNumberStyle, javascript()],\n//     });\n\n//     const view = new EditorView({\n//       state: startState,\n//       parent: editorParentRef.current,\n//     });\n\n//     // Cleanup to avoid memory leaks\n//     return () => {\n//       view.destroy();\n//     };\n//   }, [value, onChange]);\n\n//   return <div ref={editorParentRef} style={{ border: '1px solid #ddd', height: '400px' }} />;\n// };\n\n// export default Editor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,UAAU,EAAEC,MAAM,EAAEC,YAAY,QAAQ,kBAAkB;AACnE,SAASC,UAAU,QAAQ,6BAA6B;;AAExD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,iBAAiB,SAASJ,YAAY,CAAC;EAC3CK,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEAC,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC5CF,MAAM,CAACG,KAAK,CAACL,KAAK,GAAG,IAAI,CAACA,KAAK;IAC/BE,MAAM,CAACI,WAAW,GAAG,GAAG,CAAC,CAAC;IAC1B,OAAOJ,MAAM;EACf;AACF;;AAEA;AACA,MAAMK,qBAAqB,GAAGA,CAACC,IAAI,EAAEC,YAAY,KAAK;EACpDA,YAAY,CAACC,OAAO,CAAC,CAAC;IAACC,IAAI;IAAEX;EAAK,CAAC,KAAK;IACtCQ,IAAI,CAACI,QAAQ,CAAC;MACZC,OAAO,EAAEL,IAAI,CAACM,KAAK,CAACC,KAAK,CAACtB,MAAM,CAAC,CAACuB,SAAS,CAACR,IAAI,CAACM,KAAK,CAACG,GAAG,CAACN,IAAI,CAACA,IAAI,CAAC,CAACO,IAAI,EAAE,IAAIpB,iBAAiB,CAACE,KAAK,CAAC;IAC1G,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,MAAMmB,MAAM,GAAGA,CAAC;EAAEC,KAAK;EAAEX;AAAa,CAAC,KAAK;EAAAY,EAAA;EAC1C,MAAMC,SAAS,GAAGhC,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACiC,SAAS,CAACC,OAAO,EAAE;IAExB,MAAMC,UAAU,GAAGjC,WAAW,CAACkC,MAAM,CAAC;MACpCR,GAAG,EAAEG,KAAK;MACVM,UAAU,EAAE,CACV/B,UAAU,CAAC,CAAC,EACZH,UAAU,CAACmC,QAAQ,CAACC,EAAE,CAAC,KAAK,CAAC,EAC7BnC,MAAM,CAAC;QACLoC,KAAK,EAAE,iBAAiB;QACxBC,OAAO,EAAEA,CAAA,KAAM,IAAIhC,iBAAiB,CAAC,SAAS,CAAC,CAAE;MACnD,CAAC;MACD;MAAA;IAEJ,CAAC,CAAC;IAEF,MAAMiC,UAAU,GAAG,IAAIvC,UAAU,CAAC;MAChCsB,KAAK,EAAEU,UAAU;MACjBQ,MAAM,EAAEV,SAAS,CAACC;IACpB,CAAC,CAAC;;IAEF;IACAhB,qBAAqB,CAACwB,UAAU,EAAEtB,YAAY,CAAC;IAE/C,OAAO,MAAMsB,UAAU,CAACE,OAAO,CAAC,CAAC;EACnC,CAAC,EAAE,CAACb,KAAK,EAAEX,YAAY,CAAC,CAAC;EAEzB,oBAAOZ,OAAA;IAAKqC,GAAG,EAAEZ;EAAU;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChC,CAAC;AAACjB,EAAA,CA/BIF,MAAM;AAAAoB,EAAA,GAANpB,MAAM;AAiCZ,eAAeA,MAAM;;AAKrB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}