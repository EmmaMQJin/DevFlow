{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker, lineNumbers, Decoration } from '@codemirror/view';\nimport { basicSetup } from '@uiw/codemirror-extensions-basic-setup';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { python } from '@codemirror/lang-python';\n\n// Function to determine the language extension based on the file name\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLanguageExtension = fileName => {\n  if (fileName.endsWith('.js')) {\n    return javascript();\n  } else if (fileName.endsWith('.py')) {\n    return python();\n  }\n  return [];\n};\nclass ColoredGutterMarker extends GutterMarker {\n  constructor(color) {\n    super(); // Call the parent class constructor\n    this.color = color; // Store the color value\n  }\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.background = this.color;\n    marker.style.width = '5px'; // Set the width of the block\n    marker.style.height = '100%';\n    return marker;\n  }\n}\n// Editor component\nconst Editor = ({\n  linesToColor,\n  colorToUse,\n  currentFile,\n  onContentChange\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  console.log(\"editor file: \", currentFile);\n  useEffect(() => {\n    if (!editorRef.current) return;\n    // Define a function to create gutter markers based on linesToColor\n    const createGutterMarkers = () => {\n      return linesToColor.map(lineNumber => {\n        const marker = new ColoredGutterMarker(colorToUse);\n        // Assuming line numbers are 1-indexed and map directly to positions\n        const pos = lineNumber - 1;\n        return {\n          pos,\n          marker\n        };\n      });\n    };\n    // TODO: should we only update the actual content when we switch to other files??\n    // TODO: actually, when we switch context states, when we switch back, only then create\n    // a new editor and pull from the file contents?\n    const updateListener = EditorView.updateListener.of(update => {\n      // we just want to write to the file contents here\n      if (update.docChanged) {\n        const newContent = update.state.doc.toString();\n        console.log(\"new content:\", newContent);\n        onContentChange({\n          name: currentFile.name,\n          content: newContent\n        });\n      }\n    });\n    const langExtension = getLanguageExtension(currentFile.name);\n    // Initialize editor state with custom gutter\n    const startState = EditorState.create({\n      doc: currentFile.content,\n      extensions: [gutter({\n        class: 'custom-gutter',\n        lineMarker: (view, line) => {\n          // Check if the current line number should have a marker\n          const lineNumber = view.state.doc.lineAt(line.from).number;\n          if (linesToColor.includes(lineNumber)) {\n            return new ColoredGutterMarker(colorToUse);\n          }\n          return null;\n        }\n      }), lineNumbers(), basicSetup(), langExtension, updateListener]\n    });\n\n    // Create a new EditorView if:\n    // the line numbers we want to color updates\n    const view = new EditorView({\n      state: startState,\n      parent: editorRef.current\n    });\n    editorRef.current.view = view;\n\n    // Cleanup function to destroy the editor view when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [currentFile.name]); //, currentFile.linesToColor Dependency array to re-initialize the editor if linesToColor change\n\n  useEffect(() => {\n    var _editorRef$current;\n    // Handle updating gutter markers when linesToColor changes\n    const view = (_editorRef$current = editorRef.current) === null || _editorRef$current === void 0 ? void 0 : _editorRef$current.view;\n    if (view) {\n      const decorations = linesToColor.map(line => {\n        // Create a decoration for each line that should be colored\n        const pos = view.state.doc.line(line).from;\n        return Decoration.widget({\n          widget: new ColoredGutterMarker(colorToUse),\n          side: -1\n        }).range(pos);\n      });\n\n      // Dispatch a transaction to update decorations\n      view.dispatch({\n        effects: Decoration.set(decorations, true).map(update => update.tr)\n      });\n    }\n  }, [linesToColor, colorToUse]); // React to linesToColor changes\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorRef,\n    className: \"editor-div\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 10\n  }, this);\n};\n_s(Editor, \"ueqoO+5gVAT6IRBF08iN84bYr2g=\");\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","EditorState","EditorView","gutter","GutterMarker","lineNumbers","Decoration","basicSetup","javascript","python","jsxDEV","_jsxDEV","getLanguageExtension","fileName","endsWith","ColoredGutterMarker","constructor","color","toDOM","marker","document","createElement","style","background","width","height","Editor","linesToColor","colorToUse","currentFile","onContentChange","_s","editorRef","console","log","current","createGutterMarkers","map","lineNumber","pos","updateListener","of","update","docChanged","newContent","state","doc","toString","name","content","langExtension","startState","create","extensions","class","lineMarker","view","line","lineAt","from","number","includes","parent","destroy","_editorRef$current","decorations","widget","side","range","dispatch","effects","set","tr","ref","className","_jsxFileName","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker, lineNumbers, Decoration } from '@codemirror/view';\nimport { basicSetup } from '@uiw/codemirror-extensions-basic-setup';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { python } from '@codemirror/lang-python';\n\n// Function to determine the language extension based on the file name\nconst getLanguageExtension = (fileName) => {\n  if (fileName.endsWith('.js')) {\n    return javascript();\n  } else if (fileName.endsWith('.py')) {\n    return python();\n  }\n  return [];\n};\n\nclass ColoredGutterMarker extends GutterMarker {\n  constructor(color) {\n    super(); // Call the parent class constructor\n    this.color = color; // Store the color value\n  }\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.background = this.color;\n    marker.style.width = '5px'; // Set the width of the block\n    marker.style.height = '100%'\n    return marker;\n  }\n}\n// Editor component\nconst Editor = ({ linesToColor, colorToUse, currentFile, onContentChange }) => {\n  const editorRef = useRef(null);\n  console.log(\"editor file: \", currentFile);\n  useEffect(() => {\n    if (!editorRef.current) return;\n      // Define a function to create gutter markers based on linesToColor\n      const createGutterMarkers = () => {\n        return linesToColor.map(lineNumber => {\n            const marker = new ColoredGutterMarker(colorToUse);\n            // Assuming line numbers are 1-indexed and map directly to positions\n            const pos = lineNumber - 1;\n            return { pos, marker };\n        });\n      };\n    // TODO: should we only update the actual content when we switch to other files??\n    // TODO: actually, when we switch context states, when we switch back, only then create\n    // a new editor and pull from the file contents?\n    const updateListener = EditorView.updateListener.of((update) => {\n      // we just want to write to the file contents here\n      if (update.docChanged) {\n        const newContent = update.state.doc.toString();\n        console.log(\"new content:\", newContent);\n        onContentChange({name: currentFile.name, content: newContent});\n      }\n    });\n\n    const langExtension = getLanguageExtension(currentFile.name);\n    // Initialize editor state with custom gutter\n    const startState = EditorState.create({\n      doc: currentFile.content,\n      extensions: [\n        gutter({\n          class: 'custom-gutter',\n          lineMarker: (view, line) => {\n            // Check if the current line number should have a marker\n            const lineNumber = view.state.doc.lineAt(line.from).number;\n            if (linesToColor.includes(lineNumber)) {\n              return new ColoredGutterMarker(colorToUse);\n            }\n            return null; \n          },\n        }),\n        lineNumbers(),\n        basicSetup(),\n        langExtension,\n        updateListener\n      ],\n    });\n\n    // Create a new EditorView if:\n      // the line numbers we want to color updates\n    const view = new EditorView({\n      state: startState,\n      parent: editorRef.current,\n    });\n\n    editorRef.current.view = view;\n\n    // Cleanup function to destroy the editor view when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [currentFile.name]); //, currentFile.linesToColor Dependency array to re-initialize the editor if linesToColor change\n\n  useEffect(() => {\n    // Handle updating gutter markers when linesToColor changes\n    const view = editorRef.current?.view;\n    if (view) {\n        const decorations = linesToColor.map(line => {\n            // Create a decoration for each line that should be colored\n            const pos = view.state.doc.line(line).from;\n            return Decoration.widget({\n                widget: new ColoredGutterMarker(colorToUse),\n                side: -1\n            }).range(pos);\n        });\n\n        // Dispatch a transaction to update decorations\n        view.dispatch({\n            effects: Decoration.set(decorations, true).map(update => update.tr)\n        });\n    }\n  }, [linesToColor, colorToUse]); // React to linesToColor changes\n  return <div ref={editorRef} className='editor-div' />;\n};\n\nexport default Editor;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}