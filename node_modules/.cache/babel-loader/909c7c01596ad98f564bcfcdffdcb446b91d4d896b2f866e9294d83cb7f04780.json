{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { EditorState } from \"@codemirror/state\";\nimport { EditorView, gutter, GutterMarker, lineNumbers } from \"@codemirror/view\";\nimport { basicSetup } from \"@uiw/codemirror-extensions-basic-setup\";\nimport { javascript } from \"@codemirror/lang-javascript\";\nimport { python } from \"@codemirror/lang-python\";\nimport './editor.css';\n\n// Function to determine the language extension based on the file name\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLanguageExtension = fileName => {\n  if (fileName.endsWith(\".js\")) {\n    return javascript();\n  } else if (fileName.endsWith(\".py\")) {\n    return python();\n  }\n  return [];\n};\nclass ColoredGutterMarker extends GutterMarker {\n  constructor(color) {\n    super(); // Call the parent class constructor\n    this.color = color; // Store the color value\n  }\n  toDOM() {\n    const marker = document.createElement(\"div\");\n    marker.style.background = this.color;\n    marker.style.width = \"10px\"; // Set the width of the block\n    marker.style.height = \"100%\";\n    return marker;\n  }\n}\n// Editor component\nconst Editor = ({\n  linesToColor,\n  colorToUse,\n  currentFile,\n  onContentChange\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  console.log(\"editor file: \", currentFile);\n  useEffect(() => {\n    if (!editorRef.current) return;\n    // TODO: should we only update the actual content when we switch to other files??\n    // TODO: actually, when we switch context states, when we switch back, only then create\n    // a new editor and pull from the file contents?\n    const updateListener = EditorView.updateListener.of(update => {\n      // we just want to write to the file contents here\n      if (update.docChanged) {\n        const newContent = update.state.doc.toString();\n        console.log(\"new content:\", newContent);\n        onContentChange({\n          name: currentFile.name,\n          content: newContent\n        });\n      }\n    });\n    const langExtension = getLanguageExtension(currentFile.name);\n    // Initialize editor state with custom gutter\n    const startState = EditorState.create({\n      doc: currentFile.content,\n      extensions: [gutter({\n        class: \"custom-gutter\",\n        lineMarker: (view, line) => {\n          // Check if the current line number should have a marker\n          const lineNumber = view.state.doc.lineAt(line.from).number;\n          if (linesToColor.includes(lineNumber)) {\n            return new ColoredGutterMarker(colorToUse);\n          }\n          return null;\n        }\n      }), lineNumbers(), basicSetup(), langExtension, updateListener]\n    });\n\n    // Create a new EditorView if:\n    // the line numbers we want to color updates\n    const view = new EditorView({\n      state: startState,\n      parent: editorRef.current\n    });\n\n    // Cleanup function to destroy the editor view when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [currentFile.name, linesToColor]); //, currentFile.linesToColor Dependency array to re-initialize the editor if linesToColor change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorRef,\n    className: \"editor-div\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n};\n_s(Editor, \"FXGU5sRik9TpAO5B+Yli91RwFDk=\");\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","EditorState","EditorView","gutter","GutterMarker","lineNumbers","basicSetup","javascript","python","jsxDEV","_jsxDEV","getLanguageExtension","fileName","endsWith","ColoredGutterMarker","constructor","color","toDOM","marker","document","createElement","style","background","width","height","Editor","linesToColor","colorToUse","currentFile","onContentChange","_s","editorRef","console","log","current","updateListener","of","update","docChanged","newContent","state","doc","toString","name","content","langExtension","startState","create","extensions","class","lineMarker","view","line","lineNumber","lineAt","from","number","includes","parent","destroy","ref","className","_jsxFileName","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/editor.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { EditorState } from \"@codemirror/state\";\nimport {\n  EditorView,\n  gutter,\n  GutterMarker,\n  lineNumbers,\n} from \"@codemirror/view\";\nimport { basicSetup } from \"@uiw/codemirror-extensions-basic-setup\";\nimport { javascript } from \"@codemirror/lang-javascript\";\nimport { python } from \"@codemirror/lang-python\";\nimport './editor.css';\n\n// Function to determine the language extension based on the file name\nconst getLanguageExtension = (fileName) => {\n  if (fileName.endsWith(\".js\")) {\n    return javascript();\n  } else if (fileName.endsWith(\".py\")) {\n    return python();\n  }\n  return [];\n};\n\nclass ColoredGutterMarker extends GutterMarker {\n  constructor(color) {\n    super(); // Call the parent class constructor\n    this.color = color; // Store the color value\n  }\n  toDOM() {\n    const marker = document.createElement(\"div\");\n    marker.style.background = this.color;\n    marker.style.width = \"10px\"; // Set the width of the block\n    marker.style.height = \"100%\";\n    return marker;\n  }\n}\n// Editor component\nconst Editor = ({ linesToColor, colorToUse, currentFile, onContentChange }) => {\n  const editorRef = useRef(null);\n  console.log(\"editor file: \", currentFile);\n  useEffect(() => {\n    if (!editorRef.current) return;\n    // TODO: should we only update the actual content when we switch to other files??\n    // TODO: actually, when we switch context states, when we switch back, only then create\n    // a new editor and pull from the file contents?\n    const updateListener = EditorView.updateListener.of((update) => {\n      // we just want to write to the file contents here\n      if (update.docChanged) {\n        const newContent = update.state.doc.toString();\n        console.log(\"new content:\", newContent);\n        onContentChange({ name: currentFile.name, content: newContent });\n      }\n    });\n\n    const langExtension = getLanguageExtension(currentFile.name);\n    // Initialize editor state with custom gutter\n    const startState = EditorState.create({\n      doc: currentFile.content,\n      extensions: [\n        gutter({\n          class: \"custom-gutter\",\n          lineMarker: (view, line) => {\n            // Check if the current line number should have a marker\n            const lineNumber = view.state.doc.lineAt(line.from).number;\n            if (linesToColor.includes(lineNumber)) {\n              return new ColoredGutterMarker(colorToUse);\n            }\n            return null;\n          },\n        }),\n        lineNumbers(),\n        basicSetup(),\n        langExtension,\n        updateListener,\n      ],\n    });\n\n    // Create a new EditorView if:\n    // the line numbers we want to color updates\n    const view = new EditorView({\n      state: startState,\n      parent: editorRef.current,\n    });\n\n    // Cleanup function to destroy the editor view when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [currentFile.name, linesToColor]); //, currentFile.linesToColor Dependency array to re-initialize the editor if linesToColor change\n\n  return <div ref={editorRef} className=\"editor-div\" />;\n};\n\nexport default Editor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}