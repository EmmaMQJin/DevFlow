{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { EditorState, RangeSetBuilder } from '@codemirror/state';\nimport { EditorView, lineNumbers, gutter } from '@codemirror/view';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = ({\n  value,\n  onChange,\n  specialLines\n}) => {\n  _s();\n  const editorParentRef = useRef(null);\n  useEffect(() => {\n    if (!editorParentRef.current) return;\n\n    // Initialize the editor state with basic setup\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [javascript(), lineNumbers(), EditorView.lineWrapping, gutter(), EditorState.allowMultipleSelections.of(true), EditorView.updateListener.of(update => {\n        if (update.docChanged) {\n          onChange(update.state.doc.toString());\n        }\n      }), EditorView.baseTheme({\n        '.cm-lineNumbers .cm-gutterElement': {\n          color: '#000',\n          // Default color for line numbers\n          fontFamily: 'Monaco, monospace',\n          fontSize: '0.85em'\n        }\n      })]\n    });\n    const view = new EditorView({\n      state: startState,\n      parent: editorParentRef.current\n    });\n\n    // Function to update line number styles based on specialLines prop\n    const updateLineStyles = (view, specialLines) => {\n      const decorations = new RangeSetBuilder();\n      specialLines.forEach(({\n        line,\n        color\n      }) => {\n        const deco = EditorView.decorations.of(RangeSetBuilder.empty.add(view.state.doc.line(line).from, {\n          class: `line-${line}`,\n          attributes: {\n            style: `color: ${color};`\n          }\n        }));\n        decorations.add(deco);\n      });\n      view.dispatch({\n        effects: EditorView.decorations.reconfigure(decorations.finish())\n      });\n    };\n\n    // Call the function to apply initial styles\n    updateLineStyles(view, specialLines);\n\n    // Cleanup function to destroy the editor when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [value, onChange, specialLines]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorParentRef,\n    style: {\n      height: '400px',\n      border: '1px solid #ddd'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, this);\n};\n_s(Editor, \"3VSnVeRbSyLoDWyoLSw9+RxgoHw=\");\n_c = Editor;\nexport default Editor;\n\n// import React, { useEffect, useRef } from 'react';\n// import { EditorState } from '@codemirror/state';\n// import { EditorView, lineNumbers } from '@codemirror/view';\n// import { javascript } from '@codemirror/lang-javascript';\n\n// const Editor = ({ value, onChange }) => {\n//   const editorParentRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!editorParentRef.current) return;\n\n//     // Line numbers styling extension\n//     const customLineNumberStyle = EditorView.baseTheme({\n//       '.cm-lineNumbers .cm-gutterElement': {\n//         color: '#f00', // Example color: red\n//         fontFamily: 'Monaco, monospace',\n//         fontSize: '0.85em',\n//       }\n//     });\n\n//     const startState = EditorState.create({\n//       doc: value,\n//       extensions: [lineNumbers(), customLineNumberStyle, javascript()],\n//     });\n\n//     const view = new EditorView({\n//       state: startState,\n//       parent: editorParentRef.current,\n//     });\n\n//     // Cleanup to avoid memory leaks\n//     return () => {\n//       view.destroy();\n//     };\n//   }, [value, onChange]);\n\n//   return <div ref={editorParentRef} style={{ border: '1px solid #ddd', height: '400px' }} />;\n// };\n\n// export default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","EditorState","RangeSetBuilder","EditorView","lineNumbers","gutter","javascript","jsxDEV","_jsxDEV","Editor","value","onChange","specialLines","_s","editorParentRef","current","startState","create","doc","extensions","lineWrapping","allowMultipleSelections","of","updateListener","update","docChanged","state","toString","baseTheme","color","fontFamily","fontSize","view","parent","updateLineStyles","decorations","forEach","line","deco","empty","add","from","class","attributes","style","dispatch","effects","reconfigure","finish","destroy","ref","height","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { EditorState, RangeSetBuilder } from '@codemirror/state';\nimport { EditorView, lineNumbers, gutter } from '@codemirror/view';\nimport { javascript } from '@codemirror/lang-javascript';\n\nconst Editor = ({ value, onChange, specialLines }) => {\n  const editorParentRef = useRef(null);\n\n  useEffect(() => {\n    if (!editorParentRef.current) return;\n\n    // Initialize the editor state with basic setup\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [\n        javascript(),\n        lineNumbers(),\n        EditorView.lineWrapping,\n        gutter(),\n        EditorState.allowMultipleSelections.of(true),\n        EditorView.updateListener.of((update) => {\n          if (update.docChanged) {\n            onChange(update.state.doc.toString());\n          }\n        }),\n        EditorView.baseTheme({\n          '.cm-lineNumbers .cm-gutterElement': {\n            color: '#000', // Default color for line numbers\n            fontFamily: 'Monaco, monospace',\n            fontSize: '0.85em',\n          }\n        })\n      ],\n    });\n\n    const view = new EditorView({\n      state: startState,\n      parent: editorParentRef.current,\n    });\n\n    // Function to update line number styles based on specialLines prop\n    const updateLineStyles = (view, specialLines) => {\n      const decorations = new RangeSetBuilder();\n      specialLines.forEach(({ line, color }) => {\n        const deco = EditorView.decorations.of(\n          RangeSetBuilder.empty.add(view.state.doc.line(line).from, {\n            class: `line-${line}`,\n            attributes: { style: `color: ${color};` }\n          })\n        );\n        decorations.add(deco);\n      });\n      view.dispatch({\n        effects: EditorView.decorations.reconfigure(decorations.finish())\n      });\n    };\n\n    // Call the function to apply initial styles\n    updateLineStyles(view, specialLines);\n\n    // Cleanup function to destroy the editor when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [value, onChange, specialLines]);\n\n  return <div ref={editorParentRef} style={{ height: '400px', border: '1px solid #ddd' }} />;\n};\n\nexport default Editor;\n\n\n// import React, { useEffect, useRef } from 'react';\n// import { EditorState } from '@codemirror/state';\n// import { EditorView, lineNumbers } from '@codemirror/view';\n// import { javascript } from '@codemirror/lang-javascript';\n\n// const Editor = ({ value, onChange }) => {\n//   const editorParentRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!editorParentRef.current) return;\n\n//     // Line numbers styling extension\n//     const customLineNumberStyle = EditorView.baseTheme({\n//       '.cm-lineNumbers .cm-gutterElement': {\n//         color: '#f00', // Example color: red\n//         fontFamily: 'Monaco, monospace',\n//         fontSize: '0.85em',\n//       }\n//     });\n\n//     const startState = EditorState.create({\n//       doc: value,\n//       extensions: [lineNumbers(), customLineNumberStyle, javascript()],\n//     });\n\n//     const view = new EditorView({\n//       state: startState,\n//       parent: editorParentRef.current,\n//     });\n\n//     // Cleanup to avoid memory leaks\n//     return () => {\n//       view.destroy();\n//     };\n//   }, [value, onChange]);\n\n//   return <div ref={editorParentRef} style={{ border: '1px solid #ddd', height: '400px' }} />;\n// };\n\n// export default Editor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}