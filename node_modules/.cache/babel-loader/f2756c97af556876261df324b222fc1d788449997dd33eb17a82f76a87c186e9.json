{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js\",\n  _s = $RefreshSig$();\n// Import necessary CodeMirror packages\nimport React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, lineNumbers, gutter } from '@codemirror/view';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = ({\n  value,\n  specialLineNumbers,\n  specialLineColor\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  useEffect(() => {\n    if (!editorRef.current) return;\n\n    // Define a custom extension to style specific line numbers\n    const specialLineNumberExtension = EditorView.theme({\n      \"&\": {\n        // Apply styles globally to the line number gutter elements\n        \".cm-gutterElement\": {\n          color: \"black\"\n        } // Default color for line numbers\n      },\n      ...specialLineNumbers.reduce((styles, lineNumber) => {\n        // Apply the special color to each specified line number\n        return {\n          ...styles,\n          [`.cm-gutterElement:nth-child(${lineNumber})`]: {\n            color: specialLineColor\n          }\n        };\n      }, {})\n    });\n\n    // Create the initial editor state\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [lineNumbers(), javascript(), specialLineNumberExtension // Include the custom line number styling\n      ]\n    });\n\n    // Initialize the editor view\n    const view = new EditorView({\n      state: startState,\n      parent: editorRef.current\n    });\n\n    // Cleanup function to destroy the editor instance when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [value, specialLineNumbers, specialLineColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorRef,\n    style: {\n      height: \"400px\",\n      border: \"1px solid black\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n_s(Editor, \"FXGU5sRik9TpAO5B+Yli91RwFDk=\");\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","EditorState","EditorView","lineNumbers","gutter","javascript","jsxDEV","_jsxDEV","Editor","value","specialLineNumbers","specialLineColor","_s","editorRef","current","specialLineNumberExtension","theme","color","reduce","styles","lineNumber","startState","create","doc","extensions","view","state","parent","destroy","ref","style","height","border","fileName","_jsxFileName","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js"],"sourcesContent":["// Import necessary CodeMirror packages\nimport React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, lineNumbers, gutter } from '@codemirror/view';\nimport { javascript } from '@codemirror/lang-javascript';\n\nconst Editor = ({ value, specialLineNumbers, specialLineColor }) => {\n  const editorRef = useRef(null);\n\n  useEffect(() => {\n    if (!editorRef.current) return;\n\n    // Define a custom extension to style specific line numbers\n    const specialLineNumberExtension = EditorView.theme({\n      \"&\": {\n        // Apply styles globally to the line number gutter elements\n        \".cm-gutterElement\": { color: \"black\" }, // Default color for line numbers\n      },\n      ...specialLineNumbers.reduce((styles, lineNumber) => {\n        // Apply the special color to each specified line number\n        return {\n          ...styles,\n          [`.cm-gutterElement:nth-child(${lineNumber})`]: { color: specialLineColor },\n        };\n      }, {}),\n    });\n\n    // Create the initial editor state\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [\n        lineNumbers(),\n        javascript(),\n        specialLineNumberExtension, // Include the custom line number styling\n      ],\n    });\n\n    // Initialize the editor view\n    const view = new EditorView({\n      state: startState,\n      parent: editorRef.current,\n    });\n\n    // Cleanup function to destroy the editor instance when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [value, specialLineNumbers, specialLineColor]);\n\n  return <div ref={editorRef} style={{ height: \"400px\", border: \"1px solid black\" }} />;\n};\n\nexport default Editor;\n\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,UAAU,EAAEC,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AAClE,SAASC,UAAU,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,MAAM,GAAGA,CAAC;EAAEC,KAAK;EAAEC,kBAAkB;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EAClE,MAAMC,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACc,SAAS,CAACC,OAAO,EAAE;;IAExB;IACA,MAAMC,0BAA0B,GAAGb,UAAU,CAACc,KAAK,CAAC;MAClD,GAAG,EAAE;QACH;QACA,mBAAmB,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAC,CAAE;MAC3C,CAAC;MACD,GAAGP,kBAAkB,CAACQ,MAAM,CAAC,CAACC,MAAM,EAAEC,UAAU,KAAK;QACnD;QACA,OAAO;UACL,GAAGD,MAAM;UACT,CAAE,+BAA8BC,UAAW,GAAE,GAAG;YAAEH,KAAK,EAAEN;UAAiB;QAC5E,CAAC;MACH,CAAC,EAAE,CAAC,CAAC;IACP,CAAC,CAAC;;IAEF;IACA,MAAMU,UAAU,GAAGpB,WAAW,CAACqB,MAAM,CAAC;MACpCC,GAAG,EAAEd,KAAK;MACVe,UAAU,EAAE,CACVrB,WAAW,CAAC,CAAC,EACbE,UAAU,CAAC,CAAC,EACZU,0BAA0B,CAAE;MAAA;IAEhC,CAAC,CAAC;;IAEF;IACA,MAAMU,IAAI,GAAG,IAAIvB,UAAU,CAAC;MAC1BwB,KAAK,EAAEL,UAAU;MACjBM,MAAM,EAAEd,SAAS,CAACC;IACpB,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXW,IAAI,CAACG,OAAO,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,CAACnB,KAAK,EAAEC,kBAAkB,EAAEC,gBAAgB,CAAC,CAAC;EAEjD,oBAAOJ,OAAA;IAAKsB,GAAG,EAAEhB,SAAU;IAACiB,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAkB;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAd,UAAA;IAAAe,YAAA;EAAA,OAAE,CAAC;AACvF,CAAC;AAACvB,EAAA,CA5CIJ,MAAM;AAAA4B,EAAA,GAAN5B,MAAM;AA8CZ,eAAeA,MAAM;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}