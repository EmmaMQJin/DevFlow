{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/editor/lines.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { EditorState } from \"@codemirror/state\";\nimport { EditorView, lineNumbers } from \"@codemirror/view\";\nimport { javascript } from \"@codemirror/lang-javascript\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = ({\n  value,\n  onChange\n}) => {\n  _s();\n  const editorParentRef = useRef(null);\n  useEffect(() => {\n    if (!editorParentRef.current) return;\n\n    // Customizing the line numbers\n    const hexLineNumbers = lineNumbers({\n      formatNumber: n => n.toString() // Example: convert to hex with n.toString(16)\n    });\n\n    // Applying base theme for styling\n    const customLineNumberStyle = EditorView.baseTheme({\n      \".cm-lineNumbers .cm-gutterElement\": {\n        color: \"red\",\n        // Change the color\n        fontFamily: \"monospace\",\n        // Change the font\n        fontSize: \"1rem\" // Adjust the size as needed\n      }\n    });\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [hexLineNumbers, customLineNumberStyle, javascript()]\n    });\n    const view = new EditorView({\n      state: startState,\n      parent: editorParentRef.current\n    });\n\n    // Listen for changes and update the parent component's state\n    view.dispatch({\n      effects: EditorView.updateListener.of(update => {\n        if (update.docChanged) {\n          const newValue = update.state.doc.toString();\n          onChange(newValue);\n        }\n      })\n    });\n    return () => {\n      view.destroy();\n    };\n  }, [onChange, value]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorParentRef,\n    style: {\n      height: '400px',\n      border: '1px solid black'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n_s(Editor, \"3VSnVeRbSyLoDWyoLSw9+RxgoHw=\");\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","EditorState","EditorView","lineNumbers","javascript","jsxDEV","_jsxDEV","Editor","value","onChange","_s","editorParentRef","current","hexLineNumbers","formatNumber","n","toString","customLineNumberStyle","baseTheme","color","fontFamily","fontSize","startState","create","doc","extensions","view","state","parent","dispatch","effects","updateListener","of","update","docChanged","newValue","destroy","ref","style","height","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/editor/lines.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { EditorState } from \"@codemirror/state\";\nimport { EditorView, lineNumbers } from \"@codemirror/view\";\nimport { javascript } from \"@codemirror/lang-javascript\";\n\nconst Editor = ({ value, onChange }) => {\n  const editorParentRef = useRef(null);\n\n  useEffect(() => {\n    if (!editorParentRef.current) return;\n\n    // Customizing the line numbers\n    const hexLineNumbers = lineNumbers({\n      formatNumber: n => n.toString(), // Example: convert to hex with n.toString(16)\n    });\n\n    // Applying base theme for styling\n    const customLineNumberStyle = EditorView.baseTheme({\n      \".cm-lineNumbers .cm-gutterElement\": {\n        color: \"red\", // Change the color\n        fontFamily: \"monospace\", // Change the font\n        fontSize: \"1rem\", // Adjust the size as needed\n      }\n    });\n\n    const startState = EditorState.create({\n      doc: value,\n      extensions: [hexLineNumbers, customLineNumberStyle, javascript()],\n    });\n\n    const view = new EditorView({\n      state: startState,\n      parent: editorParentRef.current,\n    });\n\n    // Listen for changes and update the parent component's state\n    view.dispatch({\n      effects: EditorView.updateListener.of(update => {\n        if (update.docChanged) {\n          const newValue = update.state.doc.toString();\n          onChange(newValue);\n        }\n      })\n    });\n\n    return () => {\n      view.destroy();\n    };\n  }, [onChange, value]);\n\n  return <div ref={editorParentRef} style={{ height: '400px', border: '1px solid black' }} />;\n};\n\nexport default Editor;\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,UAAU,EAAEC,WAAW,QAAQ,kBAAkB;AAC1D,SAASC,UAAU,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,MAAM,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAMC,eAAe,GAAGX,MAAM,CAAC,IAAI,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACY,eAAe,CAACC,OAAO,EAAE;;IAE9B;IACA,MAAMC,cAAc,GAAGV,WAAW,CAAC;MACjCW,YAAY,EAAEC,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE;IACnC,CAAC,CAAC;;IAEF;IACA,MAAMC,qBAAqB,GAAGf,UAAU,CAACgB,SAAS,CAAC;MACjD,mCAAmC,EAAE;QACnCC,KAAK,EAAE,KAAK;QAAE;QACdC,UAAU,EAAE,WAAW;QAAE;QACzBC,QAAQ,EAAE,MAAM,CAAE;MACpB;IACF,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAGrB,WAAW,CAACsB,MAAM,CAAC;MACpCC,GAAG,EAAEhB,KAAK;MACViB,UAAU,EAAE,CAACZ,cAAc,EAAEI,qBAAqB,EAAEb,UAAU,CAAC,CAAC;IAClE,CAAC,CAAC;IAEF,MAAMsB,IAAI,GAAG,IAAIxB,UAAU,CAAC;MAC1ByB,KAAK,EAAEL,UAAU;MACjBM,MAAM,EAAEjB,eAAe,CAACC;IAC1B,CAAC,CAAC;;IAEF;IACAc,IAAI,CAACG,QAAQ,CAAC;MACZC,OAAO,EAAE5B,UAAU,CAAC6B,cAAc,CAACC,EAAE,CAACC,MAAM,IAAI;QAC9C,IAAIA,MAAM,CAACC,UAAU,EAAE;UACrB,MAAMC,QAAQ,GAAGF,MAAM,CAACN,KAAK,CAACH,GAAG,CAACR,QAAQ,CAAC,CAAC;UAC5CP,QAAQ,CAAC0B,QAAQ,CAAC;QACpB;MACF,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,MAAM;MACXT,IAAI,CAACU,OAAO,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,CAAC3B,QAAQ,EAAED,KAAK,CAAC,CAAC;EAErB,oBAAOF,OAAA;IAAK+B,GAAG,EAAE1B,eAAgB;IAAC2B,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAkB;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC7F,CAAC;AAAClC,EAAA,CA9CIH,MAAM;AAAAsC,EAAA,GAANtC,MAAM;AAgDZ,eAAeA,MAAM;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}