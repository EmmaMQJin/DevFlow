{"ast":null,"code":"var _jsxFileName = \"/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker, lineNumbers } from '@codemirror/view';\nimport { basicSetup } from '@uiw/codemirror-extensions-basic-setup';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { python } from '@codemirror/lang-python';\n\n// Function to determine the language extension based on the file name\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLanguageExtension = fileName => {\n  if (fileName.endsWith('.js')) {\n    return javascript();\n  } else if (fileName.endsWith('.py')) {\n    return python();\n  }\n  return [];\n};\nclass ColoredGutterMarker extends GutterMarker {\n  constructor(color) {\n    super(); // Call the parent class constructor\n    this.color = color; // Store the color value\n  }\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.background = this.color;\n    marker.style.width = '5px'; // Set the width of the block\n    marker.style.height = '100%';\n    return marker;\n  }\n}\n// Editor component\nconst Editor = ({\n  linesToColor,\n  colorToUse,\n  currentFile,\n  onContentChange\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  const editorViewRef = useRef(null);\n  useEffect(() => {\n    if (!editorRef.current) return;\n    if (!editorViewRef.current) {\n      const updateListener = EditorView.updateListener.of(update => {\n        if (update.docChanged) {\n          // When the document changes, retrieve the updated content\n          const newContent = update.state.doc.toString();\n          // Call onContentChange with the new content to update the parent component's state\n          onContentChange(newContent);\n        }\n      });\n      const langExtension = getLanguageExtension(currentFile.name);\n      // Initialize editor state with custom gutter\n      const startState = EditorState.create({\n        doc: currentFile.content,\n        extensions: [\n        // basicSetup,\n        gutter({\n          class: 'custom-gutter',\n          lineMarker: (view, line) => {\n            // Check if the current line number should have a red marker\n            const lineNumber = view.state.doc.lineAt(line.from).number;\n            // console.log(lineNumber);\n            if (linesToColor.includes(lineNumber)) {\n              return new ColoredGutterMarker(colorToUse);\n            }\n            return null; // Default markers or no marker\n          }\n        }), lineNumbers(), basicSetup(), langExtension\n        // updateListener\n        ]\n      });\n\n      // Create a new EditorView\n      const view = new EditorView({\n        state: startState,\n        parent: editorRef.current\n      });\n    } else {\n      // Here, instead of reinitializing, we update the content if it has changed.\n      const transaction = editorViewRef.current.state.update({\n        changes: {\n          from: 0,\n          to: editorViewRef.current.state.doc.length,\n          insert: currentFile.content\n        }\n      });\n      editorViewRef.current.dispatch(transaction);\n    }\n\n    // Cleanup function to destroy the editor view when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [linesToColor, colorToUse, currentFile, onContentChange]); // Dependency array to re-initialize the editor if linesToColor change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorRef,\n    className: \"editor-div\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n};\n_s(Editor, \"TEiEFntSQn2RpZ4Her8uWkdJrw4=\");\n_c = Editor;\nexport default Editor;\n\n// import React, { useEffect, useRef } from 'react';\n// import { EditorState } from '@codemirror/state';\n// import { EditorView, lineNumbers } from '@codemirror/view';\n// import { javascript } from '@codemirror/lang-javascript';\n\n// const Editor = ({ value, onChange }) => {\n//   const editorParentRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!editorParentRef.current) return;\n\n//     // Line numbers styling extension\n//     const customLineNumberStyle = EditorView.baseTheme({\n//       '.cm-lineNumbers .cm-gutterElement': {\n//         color: '#f00', // Example color: red\n//         fontFamily: 'Monaco, monospace',\n//         fontSize: '0.85em',\n//       }\n//     });\n\n//     const startState = EditorState.create({\n//       doc: value,\n//       extensions: [lineNumbers(), customLineNumberStyle, javascript()],\n//     });\n\n//     const view = new EditorView({\n//       state: startState,\n//       parent: editorParentRef.current,\n//     });\n\n//     // Cleanup to avoid memory leaks\n//     return () => {\n//       view.destroy();\n//     };\n//   }, [value, onChange]);\n\n//   return <div ref={editorParentRef} style={{ border: '1px solid #ddd', height: '400px' }} />;\n// };\n\n// export default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","EditorState","EditorView","gutter","GutterMarker","lineNumbers","basicSetup","javascript","python","jsxDEV","_jsxDEV","getLanguageExtension","fileName","endsWith","ColoredGutterMarker","constructor","color","toDOM","marker","document","createElement","style","background","width","height","Editor","linesToColor","colorToUse","currentFile","onContentChange","_s","editorRef","editorViewRef","current","updateListener","of","update","docChanged","newContent","state","doc","toString","langExtension","name","startState","create","content","extensions","class","lineMarker","view","line","lineNumber","lineAt","from","number","includes","parent","transaction","changes","to","length","insert","dispatch","destroy","ref","className","_jsxFileName","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emmajin0210/Desktop/DevFlow/src/components/editor/editor.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, gutter, GutterMarker, lineNumbers } from '@codemirror/view';\nimport { basicSetup } from '@uiw/codemirror-extensions-basic-setup';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { python } from '@codemirror/lang-python';\n\n// Function to determine the language extension based on the file name\nconst getLanguageExtension = (fileName) => {\n  if (fileName.endsWith('.js')) {\n    return javascript();\n  } else if (fileName.endsWith('.py')) {\n    return python();\n  }\n  return [];\n};\n\nclass ColoredGutterMarker extends GutterMarker {\n  constructor(color) {\n    super(); // Call the parent class constructor\n    this.color = color; // Store the color value\n  }\n  toDOM() {\n    const marker = document.createElement('div');\n    marker.style.background = this.color;\n    marker.style.width = '5px'; // Set the width of the block\n    marker.style.height = '100%'\n    return marker;\n  }\n}\n// Editor component\nconst Editor = ({ linesToColor, colorToUse, currentFile, onContentChange }) => {\n  const editorRef = useRef(null);\n  const editorViewRef = useRef(null);\n\n  useEffect(() => {\n    if (!editorRef.current) return;\n    if (!editorViewRef.current) {\n      const updateListener = EditorView.updateListener.of((update) => {\n        if (update.docChanged) {\n            // When the document changes, retrieve the updated content\n            const newContent = update.state.doc.toString();\n            // Call onContentChange with the new content to update the parent component's state\n            onContentChange(newContent);\n        }\n    });\n    const langExtension = getLanguageExtension(currentFile.name);\n    // Initialize editor state with custom gutter\n    const startState = EditorState.create({\n      doc: currentFile.content,\n      extensions: [\n        // basicSetup,\n        gutter({\n          class: 'custom-gutter',\n          lineMarker: (view, line) => {\n            // Check if the current line number should have a red marker\n            const lineNumber = view.state.doc.lineAt(line.from).number;\n            // console.log(lineNumber);\n            if (linesToColor.includes(lineNumber)) {\n              return new ColoredGutterMarker(colorToUse);\n            }\n            return null; // Default markers or no marker\n          },\n        }),\n        lineNumbers(),\n        basicSetup(),\n        langExtension,\n        // updateListener\n      ],\n    });\n\n    // Create a new EditorView\n    const view = new EditorView({\n      state: startState,\n      parent: editorRef.current,\n    });\n  } else {\n    // Here, instead of reinitializing, we update the content if it has changed.\n    const transaction = editorViewRef.current.state.update({\n      changes: { from: 0, to: editorViewRef.current.state.doc.length, insert: currentFile.content }\n    });\n    editorViewRef.current.dispatch(transaction);\n  }\n\n    // Cleanup function to destroy the editor view when the component unmounts\n    return () => {\n      view.destroy();\n    };\n  }, [linesToColor, colorToUse, currentFile, onContentChange]); // Dependency array to re-initialize the editor if linesToColor change\n\n  return <div ref={editorRef} className='editor-div' />;\n};\n\nexport default Editor;\n\n\n// import React, { useEffect, useRef } from 'react';\n// import { EditorState } from '@codemirror/state';\n// import { EditorView, lineNumbers } from '@codemirror/view';\n// import { javascript } from '@codemirror/lang-javascript';\n\n// const Editor = ({ value, onChange }) => {\n//   const editorParentRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!editorParentRef.current) return;\n\n//     // Line numbers styling extension\n//     const customLineNumberStyle = EditorView.baseTheme({\n//       '.cm-lineNumbers .cm-gutterElement': {\n//         color: '#f00', // Example color: red\n//         fontFamily: 'Monaco, monospace',\n//         fontSize: '0.85em',\n//       }\n//     });\n\n//     const startState = EditorState.create({\n//       doc: value,\n//       extensions: [lineNumbers(), customLineNumberStyle, javascript()],\n//     });\n\n//     const view = new EditorView({\n//       state: startState,\n//       parent: editorParentRef.current,\n//     });\n\n//     // Cleanup to avoid memory leaks\n//     return () => {\n//       view.destroy();\n//     };\n//   }, [value, onChange]);\n\n//   return <div ref={editorParentRef} style={{ border: '1px solid #ddd', height: '400px' }} />;\n// };\n\n// export default Editor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}